public abstract interface class dev/racci/minix/api/PlatformProxy {
	public static final field Companion Ldev/racci/minix/api/PlatformProxy$Companion;
	public abstract fun createLogger (Ldev/racci/minix/api/plugin/MinixPlugin;)Ldev/racci/minix/api/logger/MinixLogger;
	public abstract fun firstNonMinixPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public abstract fun getUUID (Ljava/lang/Object;)Ljava/util/UUID;
	public abstract fun loadDependencies (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public final class dev/racci/minix/api/PlatformProxy$Companion : dev/racci/minix/api/PlatformProxy {
	public fun createLogger (Ldev/racci/minix/api/plugin/MinixPlugin;)Ldev/racci/minix/api/logger/MinixLogger;
	public fun firstNonMinixPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun getUUID (Ljava/lang/Object;)Ljava/util/UUID;
	public fun loadDependencies (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public abstract interface annotation class dev/racci/minix/api/annotations/DoNotUnload : java/lang/annotation/Annotation {
}

public abstract interface annotation class dev/racci/minix/api/annotations/LevelConverter : java/lang/annotation/Annotation {
	public abstract fun type ()Ljava/lang/Class;
}

public abstract interface annotation class dev/racci/minix/api/annotations/MappedConfig : java/lang/annotation/Annotation {
	public abstract fun file ()Ljava/lang/String;
	public abstract fun serializers ()[Ljava/lang/Class;
}

public abstract interface annotation class dev/racci/minix/api/annotations/MappedExtension : java/lang/annotation/Annotation {
	public static final field Companion Ldev/racci/minix/api/annotations/MappedExtension$Companion;
	public static final field DEFAULT_THREAD_COUNT I
	public static final field REPLACE_ME Ljava/lang/String;
	public abstract fun bindToKClass ()Ljava/lang/Class;
	public abstract fun dependencies ()[Ljava/lang/Class;
	public abstract fun name ()Ljava/lang/String;
	public abstract fun threadCount ()I
}

public final class dev/racci/minix/api/annotations/MappedExtension$Companion {
	public static final field DEFAULT_THREAD_COUNT I
	public static final field REPLACE_ME Ljava/lang/String;
}

public abstract interface annotation class dev/racci/minix/api/annotations/MappedPlugin : java/lang/annotation/Annotation {
	public abstract fun bStatsId ()I
	public abstract fun bindToKClass ()Ljava/lang/Class;
}

public abstract interface annotation class dev/racci/minix/api/annotations/RunAsync : java/lang/annotation/Annotation {
}

public abstract interface class dev/racci/minix/api/callbacks/ChatInputCallback {
	public static final field Companion Ldev/racci/minix/api/callbacks/ChatInputCallback$Companion;
	public abstract fun invoke (Lnet/kyori/adventure/text/ComponentLike;)V
}

public final class dev/racci/minix/api/callbacks/ChatInputCallback$Companion {
	public final fun getEmpty ()Ldev/racci/minix/api/callbacks/ChatInputCallback;
}

public abstract interface class dev/racci/minix/api/callbacks/PlayerMoveCallback {
	public static final field Companion Ldev/racci/minix/api/callbacks/PlayerMoveCallback$Companion;
	public abstract fun invoke (Ldev/racci/minix/api/data/MinixPlayer;)Z
}

public final class dev/racci/minix/api/callbacks/PlayerMoveCallback$Companion {
	public final fun getEmpty ()Ldev/racci/minix/api/callbacks/PlayerMoveCallback;
}

public abstract interface class dev/racci/minix/api/callbacks/PlayerQuitCallback {
	public static final field Companion Ldev/racci/minix/api/callbacks/PlayerQuitCallback$Companion;
	public abstract fun invoke (Ldev/racci/minix/api/data/MinixPlayer;)V
}

public final class dev/racci/minix/api/callbacks/PlayerQuitCallback$Companion {
	public final fun getEmpty ()Ldev/racci/minix/api/callbacks/PlayerQuitCallback;
}

public abstract interface class dev/racci/minix/api/callbacks/PlayerQuitMapCallback {
	public static final field Companion Ldev/racci/minix/api/callbacks/PlayerQuitMapCallback$Companion;
	public abstract fun invoke (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;)V
}

public final class dev/racci/minix/api/callbacks/PlayerQuitMapCallback$Companion {
	public final fun getEmpty ()Ldev/racci/minix/api/callbacks/PlayerQuitMapCallback;
}

public final class dev/racci/minix/api/collections/player/ExtensionsKt {
	public static final fun onlinePlayerListOf ([Ldev/racci/minix/api/data/MinixPlayer;)Ldev/racci/minix/api/collections/player/OnlinePlayerList;
	public static final fun onlinePlayerListOf ([Lkotlin/Pair;)Ldev/racci/minix/api/collections/player/OnlinePlayerList;
	public static final fun onlinePlayerMapOfEmpty ()Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public static final fun onlinePlayerMapOfNoCallbackPair ([Lkotlin/Pair;)Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public static final fun onlinePlayerMapOfPair ([Lkotlin/Pair;)Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public static final fun onlinePlayerMapOfTriple ([Lkotlin/Triple;)Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public static final fun onlinePlayerSetOf ([Ldev/racci/minix/api/data/MinixPlayer;)Ldev/racci/minix/api/collections/player/OnlinePlayerSet;
	public static final fun onlinePlayerSetOf ([Lkotlin/Pair;)Ldev/racci/minix/api/collections/player/OnlinePlayerSet;
}

public abstract interface class dev/racci/minix/api/collections/player/OnlinePlayerCollection : dev/racci/minix/flowbus/receiver/EventReceiver, java/util/Collection, kotlin/jvm/internal/markers/KMutableCollection, org/koin/core/component/KoinComponent {
	public abstract fun add (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;)Z
	public abstract fun checkRegistration ()V
	public abstract fun clearCallbacks ()V
	public abstract fun quit (Ldev/racci/minix/api/data/MinixPlayer;)Z
}

public final class dev/racci/minix/api/collections/player/OnlinePlayerCollection$DefaultImpls {
	public static fun add (Ldev/racci/minix/api/collections/player/OnlinePlayerCollection;Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;)Z
	public static synthetic fun add$default (Ldev/racci/minix/api/collections/player/OnlinePlayerCollection;Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;ILjava/lang/Object;)Z
	public static fun checkRegistration (Ldev/racci/minix/api/collections/player/OnlinePlayerCollection;)V
	public static fun clearCallbacks (Ldev/racci/minix/api/collections/player/OnlinePlayerCollection;)V
	public static fun getKoin (Ldev/racci/minix/api/collections/player/OnlinePlayerCollection;)Lorg/koin/core/Koin;
	public static fun quit (Ldev/racci/minix/api/collections/player/OnlinePlayerCollection;Ldev/racci/minix/api/data/MinixPlayer;)Z
}

public final class dev/racci/minix/api/collections/player/OnlinePlayerList : java/util/LinkedList, dev/racci/minix/api/collections/player/OnlinePlayerCollection, dev/racci/minix/flowbus/receiver/EventReceiver {
	public fun add (ILdev/racci/minix/api/data/MinixPlayer;)V
	public synthetic fun add (ILjava/lang/Object;)V
	public fun add (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public fun add (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;)Z
	public synthetic fun add (Ljava/lang/Object;)Z
	public fun addAll (ILjava/util/Collection;)Z
	public fun addFirst (Ldev/racci/minix/api/data/MinixPlayer;)V
	public synthetic fun addFirst (Ljava/lang/Object;)V
	public fun addLast (Ldev/racci/minix/api/data/MinixPlayer;)V
	public synthetic fun addLast (Ljava/lang/Object;)V
	public fun checkRegistration ()V
	public fun clearCallbacks ()V
	public fun contains (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public final fun contains (Ljava/lang/Object;)Z
	public fun createEventScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun flowOf-tHAJEeM (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZ)Lkotlinx/coroutines/flow/Flow;
	public fun getExceptionHandler (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineExceptionHandler;
	public fun getKoin ()Lorg/koin/core/Koin;
	public fun getSize ()I
	public fun getSupervisorScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun indexOf (Ldev/racci/minix/api/data/MinixPlayer;)I
	public final fun indexOf (Ljava/lang/Object;)I
	public fun isCancelled (Ljava/lang/Object;)Z
	public fun lastIndexOf (Ldev/racci/minix/api/data/MinixPlayer;)I
	public final fun lastIndexOf (Ljava/lang/Object;)I
	public fun offer (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public synthetic fun offer (Ljava/lang/Object;)Z
	public fun offerFirst (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public synthetic fun offerFirst (Ljava/lang/Object;)Z
	public fun offerLast (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public synthetic fun offerLast (Ljava/lang/Object;)Z
	public fun poll ()Ldev/racci/minix/api/data/MinixPlayer;
	public synthetic fun poll ()Ljava/lang/Object;
	public fun pollFirst ()Ldev/racci/minix/api/data/MinixPlayer;
	public synthetic fun pollFirst ()Ljava/lang/Object;
	public fun pollLast ()Ldev/racci/minix/api/data/MinixPlayer;
	public synthetic fun pollLast ()Ljava/lang/Object;
	public fun quit (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public final fun remove (I)Ldev/racci/minix/api/data/MinixPlayer;
	public synthetic fun remove (I)Ljava/lang/Object;
	public fun remove (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public final fun remove (Ljava/lang/Object;)Z
	public fun removeAt (I)Ldev/racci/minix/api/data/MinixPlayer;
	public fun removeFirst ()Ldev/racci/minix/api/data/MinixPlayer;
	public synthetic fun removeFirst ()Ljava/lang/Object;
	public fun removeFirstOccurrence (Ljava/lang/Object;)Z
	public fun removeLast ()Ldev/racci/minix/api/data/MinixPlayer;
	public synthetic fun removeLast ()Ljava/lang/Object;
	public fun removeLastOccurrence (Ljava/lang/Object;)Z
	public fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public final fun size ()I
	public fun subscribeTo (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;Ldev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-ZYpfZMU (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;)V
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;)V
}

public final class dev/racci/minix/api/collections/player/OnlinePlayerMap : dev/racci/minix/flowbus/receiver/EventReceiver, java/util/Map, kotlin/jvm/internal/markers/KMappedMarker {
	public fun clear ()V
	public final fun clearQuiting ()V
	public fun compute (Ldev/racci/minix/api/data/MinixPlayer;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public synthetic fun compute (Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public fun computeIfAbsent (Ldev/racci/minix/api/data/MinixPlayer;Ljava/util/function/Function;)Ljava/lang/Object;
	public synthetic fun computeIfAbsent (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun computeIfPresent (Ldev/racci/minix/api/data/MinixPlayer;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public synthetic fun computeIfPresent (Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public fun containsKey (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public final fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Ljava/lang/Object;)Z
	public fun createEventScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public final fun entrySet ()Ljava/util/Set;
	public fun flowOf-tHAJEeM (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZ)Lkotlinx/coroutines/flow/Flow;
	public fun get (Ldev/racci/minix/api/data/MinixPlayer;)Ljava/lang/Object;
	public final fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getEntries ()Ljava/util/Set;
	public fun getExceptionHandler (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineExceptionHandler;
	public fun getKeys ()Ljava/util/Set;
	public fun getSize ()I
	public fun getSupervisorScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun getValues ()Ljava/util/Collection;
	public fun isCancelled (Ljava/lang/Object;)Z
	public fun isEmpty ()Z
	public final fun keySet ()Ljava/util/Set;
	public fun merge (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public synthetic fun merge (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
	public fun put (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun put (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;Ldev/racci/minix/api/callbacks/PlayerQuitMapCallback;)Ljava/lang/Object;
	public synthetic fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public static synthetic fun put$default (Ldev/racci/minix/api/collections/player/OnlinePlayerMap;Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;Ldev/racci/minix/api/callbacks/PlayerQuitMapCallback;ILjava/lang/Object;)Ljava/lang/Object;
	public fun putAll (Ljava/util/Map;)V
	public fun putIfAbsent (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;)Ljava/lang/Object;
	public synthetic fun putIfAbsent (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun quit (Ldev/racci/minix/api/data/MinixPlayer;)V
	public final fun remove (Ldev/racci/minix/api/data/MinixPlayer;)Ljava/lang/Object;
	public final fun remove (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;)Z
	public final fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun remove (Ljava/lang/Object;Ljava/lang/Object;)Z
	public fun replace (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;)Ljava/lang/Object;
	public fun replace (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;Ljava/lang/Object;)Z
	public synthetic fun replace (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public synthetic fun replace (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
	public fun replaceAll (Ljava/util/function/BiFunction;)V
	public fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public final fun set (Ldev/racci/minix/api/data/MinixPlayer;Ljava/lang/Object;)V
	public final fun size ()I
	public fun subscribeTo (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;Ldev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-ZYpfZMU (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;)V
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;)V
	public final fun values ()Ljava/util/Collection;
}

public final class dev/racci/minix/api/collections/player/OnlinePlayerSet : dev/racci/minix/api/collections/player/OnlinePlayerCollection, dev/racci/minix/flowbus/receiver/EventReceiver, java/util/Set, kotlin/jvm/internal/markers/KMutableSet {
	public fun <init> ()V
	public fun add (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public fun add (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;)Z
	public synthetic fun add (Ljava/lang/Object;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun checkRegistration ()V
	public fun clear ()V
	public fun clearCallbacks ()V
	public fun contains (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public final fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun createEventScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun flowOf-tHAJEeM (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZ)Lkotlinx/coroutines/flow/Flow;
	public fun getExceptionHandler (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineExceptionHandler;
	public fun getKoin ()Lorg/koin/core/Koin;
	public fun getSize ()I
	public fun getSupervisorScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun isCancelled (Ljava/lang/Object;)Z
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public fun quit (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public fun remove (Ldev/racci/minix/api/data/MinixPlayer;)Z
	public final fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public final fun size ()I
	public fun subscribeTo (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;Ldev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-ZYpfZMU (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;)V
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;)V
}

public final class dev/racci/minix/api/configuration/constraint/MinixConstraints {
	public static final field INSTANCE Ldev/racci/minix/api/configuration/constraint/MinixConstraints;
}

public final class dev/racci/minix/api/configuration/constraint/MinixConstraints$LoggingLevel : org/spongepowered/configurate/objectmapping/meta/Constraint {
	public static final field INSTANCE Ldev/racci/minix/api/configuration/constraint/MinixConstraints$LoggingLevel;
	public synthetic fun validate (Ljava/lang/Object;)V
	public fun validate (Ljava/lang/String;)V
}

public abstract interface class dev/racci/minix/api/coroutine/CoroutineSession : dev/racci/minix/api/plugin/WithPlugin {
	public abstract fun dispose ()V
	public abstract fun fireSuspendingEvent (Lorg/bukkit/event/Event;Ldev/racci/minix/api/data/enums/EventExecutionType;)Ljava/util/Collection;
	public abstract fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public abstract fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public abstract fun getMinecraftContext ()Lkotlin/coroutines/CoroutineContext;
	public abstract fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public abstract fun registerSuspendedListener (Lorg/bukkit/event/Listener;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun withManipulatedServerHeartBeat (Lkotlin/jvm/functions/Function2;)V
}

public final class dev/racci/minix/api/coroutine/CoroutineSession$DefaultImpls {
	public static fun async (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun closeScope (Ldev/racci/minix/api/coroutine/CoroutineSession;)V
	public static fun completableAsync (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun completableSync (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun deferredAsync (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public static fun deferredSync (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun getDataFolder (Ldev/racci/minix/api/coroutine/CoroutineSession;)Ljava/nio/file/Path;
	public static fun getKoin (Ldev/racci/minix/api/coroutine/CoroutineSession;)Lorg/koin/core/Koin;
	public static fun getLogger (Ldev/racci/minix/api/coroutine/CoroutineSession;)Ldev/racci/minix/api/logger/MinixLogger;
	public static fun getScope (Ldev/racci/minix/api/coroutine/CoroutineSession;)Lorg/koin/core/scope/Scope;
	public static fun launch (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static synthetic fun launch$default (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/Job;
	public static fun registerEvents (Ldev/racci/minix/api/coroutine/CoroutineSession;[Lorg/bukkit/event/Listener;)V
	public static fun sync (Ldev/racci/minix/api/coroutine/CoroutineSession;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public abstract class dev/racci/minix/api/coroutine/CoroutineTimings : kotlin/coroutines/AbstractCoroutineContextElement, java/lang/Runnable {
	public static final field Key Ldev/racci/minix/api/coroutine/CoroutineTimings$Key;
	public fun <init> ()V
	public final fun getQueue ()Ljava/util/Queue;
	public fun run ()V
	public final fun setQueue (Ljava/util/Queue;)V
}

public final class dev/racci/minix/api/coroutine/CoroutineTimings$Key : kotlin/coroutines/CoroutineContext$Key {
}

public final class dev/racci/minix/api/coroutine/ExtensionKt {
	public static final fun callSuspendingEvent (Lorg/bukkit/plugin/PluginManager;Lorg/bukkit/event/Event;Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/data/enums/EventExecutionType;)Ljava/util/Collection;
	public static final fun getMinecraftDispatcher (Ldev/racci/minix/api/plugin/MinixPlugin;)Lkotlin/coroutines/CoroutineContext;
	public static final fun launchAsync (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static final fun registerSuspendingEvents (Ldev/racci/minix/api/plugin/MinixPlugin;Lorg/bukkit/event/Listener;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun registerSuspendingEvents (Lorg/bukkit/plugin/PluginManager;Lorg/bukkit/event/Listener;Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class dev/racci/minix/api/data/LangConfig : dev/racci/minix/api/data/MinixConfig {
	public fun <init> ()V
	public final fun get (Ljava/lang/String;[Lkotlin/Pair;)Lnet/kyori/adventure/text/Component;
	public abstract fun getPrefixes ()Ljava/util/Map;
	public fun load (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public class dev/racci/minix/api/data/LangConfig$InnerLang : dev/racci/minix/data/utils/PropertyFinder, dev/racci/minix/api/data/MinixConfig$InnerConfig {
	public fun <init> ()V
	public fun getInitialized ()Z
	public fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun setPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public abstract class dev/racci/minix/api/data/MinixConfig : dev/racci/minix/api/plugin/WithPlugin, org/koin/core/qualifier/Qualifier {
	public fun <init> (Z)V
	public fun async (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun closeScope ()V
	public fun completableAsync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun completableSync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun deferredAsync (Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public fun deferredSync (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun equals (Ljava/lang/Object;)Z
	public fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public fun getDataFolder ()Ljava/nio/file/Path;
	public final fun getKoin ()Lorg/koin/core/Koin;
	public fun getLogger ()Ldev/racci/minix/api/logger/MinixLogger;
	public fun getMinecraftContext ()Lkotlin/coroutines/CoroutineContext;
	public final fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public final fun getPrimaryConfig ()Z
	public fun getScope ()Lorg/koin/core/scope/Scope;
	public final fun getValue ()Ljava/lang/String;
	public fun getVersionTransformations ()Ljava/util/Map;
	public fun handleLoad ()V
	public fun handleUnload ()V
	public final fun hashCode ()I
	public fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun load (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun registerEvents ([Lorg/bukkit/event/Listener;)V
	public fun sync (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public final fun toString ()Ljava/lang/String;
}

public abstract interface class dev/racci/minix/api/data/MinixConfig$InnerConfig {
	public abstract fun getInitialized ()Z
	public abstract fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public abstract fun setPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public final class dev/racci/minix/api/data/MinixConfig$InnerConfig$Default : dev/racci/minix/api/data/MinixConfig$InnerConfig {
	public field plugin Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun <init> ()V
	public fun getInitialized ()Z
	public fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun setPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public final class dev/racci/minix/api/data/MinixConfig$Minix : dev/racci/minix/api/data/MinixConfig$InnerConfig {
	public static final field Companion Ldev/racci/minix/api/data/MinixConfig$Minix$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;)V
	public synthetic fun <init> (Ljava/lang/String;Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;
	public final fun copy (Ljava/lang/String;Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;)Ldev/racci/minix/api/data/MinixConfig$Minix;
	public static synthetic fun copy$default (Ldev/racci/minix/api/data/MinixConfig$Minix;Ljava/lang/String;Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;ILjava/lang/Object;)Ldev/racci/minix/api/data/MinixConfig$Minix;
	public fun equals (Ljava/lang/Object;)Z
	public fun getInitialized ()Z
	public final fun getLoggingLevel ()Ljava/lang/String;
	public fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public final fun getStorage ()Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;
	public fun hashCode ()I
	public final fun processLoggingLevel ()V
	public final fun setLoggingLevel (Ljava/lang/String;)V
	public fun setPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/racci/minix/api/data/MinixConfig$Minix$Companion {
	public final fun getDefault ()Ldev/racci/minix/api/data/MinixConfig$Minix;
}

public final class dev/racci/minix/api/data/MinixConfig$Minix$Storage : dev/racci/minix/api/data/MinixConfig$InnerConfig {
	public fun <init> ()V
	public fun <init> (Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()I
	public final fun component4 ()Ljava/lang/String;
	public final fun component5 ()Ljava/lang/String;
	public final fun component6 ()Ljava/lang/String;
	public final fun copy (Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;
	public static synthetic fun copy$default (Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ldev/racci/minix/api/data/MinixConfig$Minix$Storage;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDatabase ()Ljava/lang/String;
	public final fun getHost ()Ljava/lang/String;
	public fun getInitialized ()Z
	public final fun getPassword ()Ljava/lang/String;
	public fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public final fun getPort ()I
	public final fun getType ()Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;
	public final fun getUsername ()Ljava/lang/String;
	public fun hashCode ()I
	public fun setPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun toString ()Ljava/lang/String;
}

public final class dev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType : java/lang/Enum {
	public static final field MARIADB Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;
	public static final field SQLITE Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;
	public static fun valueOf (Ljava/lang/String;)Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;
	public static fun values ()[Ldev/racci/minix/api/data/MinixConfig$Minix$Storage$StorageType;
}

public final class dev/racci/minix/api/data/MinixPlayer : dev/racci/minix/api/data/PlatformPlayerData {
	public static final field Companion Ldev/racci/minix/api/data/MinixPlayer$Companion;
	public fun <init> (Lorg/bukkit/OfflinePlayer;)V
	public final fun getDisplayName ()Lnet/kyori/adventure/text/Component;
	public final fun getLiquidType ()Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun getName ()Ljava/lang/String;
	public final fun getOnlinePlayer ()Lorg/bukkit/entity/Player;
	public final fun getUuid ()Ljava/util/UUID;
	public final fun isDoubleAttack ()Z
	public final fun isDoubleInteract ()Z
	public final fun isDoubleJump ()Z
	public final fun isDoubleOffhand ()Z
	public final fun isDoubleSneak ()Z
	public final fun isOnline ()Z
	public final fun setLiquidType (Ldev/racci/minix/api/data/enums/LiquidType;)V
}

public final class dev/racci/minix/api/data/MinixPlayer$Companion : dev/racci/minix/api/wrappers/WrapperCompanion {
	public fun wrapped (Ljava/lang/Object;)Ldev/racci/minix/api/data/MinixPlayer;
	public synthetic fun wrapped (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/data/PaperPlatformData : dev/racci/minix/api/data/PlatformPlayerData {
	public fun <init> ()V
	public final fun getLiquidType ()Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun isDoubleAttack ()Z
	public final fun isDoubleInteract ()Z
	public final fun isDoubleJump ()Z
	public final fun isDoubleOffhand ()Z
	public final fun isDoubleSneak ()Z
	public final fun setLiquidType (Ldev/racci/minix/api/data/enums/LiquidType;)V
}

public final class dev/racci/minix/api/data/PaperPlatformData$DoubleClickable {
	public static final field Companion Ldev/racci/minix/api/data/PaperPlatformData$DoubleClickable$Companion;
	public static final synthetic fun box-impl (I)Ldev/racci/minix/api/data/PaperPlatformData$DoubleClickable;
	public static fun constructor-impl (I)I
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (ILjava/lang/Object;)Z
	public static final fun equals-impl0 (II)Z
	public fun hashCode ()I
	public static fun hashCode-impl (I)I
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (I)Ljava/lang/String;
	public final synthetic fun unbox-impl ()I
}

public final class dev/racci/minix/api/data/PaperPlatformData$DoubleClickable$Companion {
	public final fun getATTACK-ryhzGE4 ()I
	public final fun getINTERACT-ryhzGE4 ()I
	public final fun getJUMP-ryhzGE4 ()I
	public final fun getOFFHAND-ryhzGE4 ()I
	public final fun getSNEAK-ryhzGE4 ()I
}

public abstract class dev/racci/minix/api/data/PlatformPlayerData : org/koin/core/component/KoinComponent {
	public final fun getAccessCount ()I
	public fun getKoin ()Lorg/koin/core/Koin;
	protected fun getWrappedRef ()Ldev/racci/minix/api/data/MinixPlayer;
	public final fun setAccessCount (I)V
	public final fun withAccess (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/data/enums/EventExecutionType : java/lang/Enum {
	public static final field Concurrent Ldev/racci/minix/api/data/enums/EventExecutionType;
	public static final field Sequential Ldev/racci/minix/api/data/enums/EventExecutionType;
	public static fun valueOf (Ljava/lang/String;)Ldev/racci/minix/api/data/enums/EventExecutionType;
	public static fun values ()[Ldev/racci/minix/api/data/enums/EventExecutionType;
}

public final class dev/racci/minix/api/data/enums/LiquidType : java/lang/Enum {
	public static final field Companion Ldev/racci/minix/api/data/enums/LiquidType$Companion;
	public static final field LAVA Ldev/racci/minix/api/data/enums/LiquidType;
	public static final field NON Ldev/racci/minix/api/data/enums/LiquidType;
	public static final field WATER Ldev/racci/minix/api/data/enums/LiquidType;
	public static fun valueOf (Ljava/lang/String;)Ldev/racci/minix/api/data/enums/LiquidType;
	public static fun values ()[Ldev/racci/minix/api/data/enums/LiquidType;
}

public final class dev/racci/minix/api/data/enums/LiquidType$Companion {
	public final fun convert (Lorg/bukkit/Material;)Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun convert (Lorg/bukkit/block/Block;)Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun convert (Lorg/bukkit/block/BlockState;)Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun getLiquidType (Lorg/bukkit/Material;)Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun getLiquidType (Lorg/bukkit/block/Block;)Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun getLiquidType (Lorg/bukkit/block/BlockState;)Ldev/racci/minix/api/data/enums/LiquidType;
}

public class dev/racci/minix/api/events/CompanionEventHandler {
	public fun <init> ()V
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public abstract interface class dev/racci/minix/api/events/MinixCancellable : org/bukkit/event/Cancellable {
	public abstract fun getActualCancelled ()Z
	public abstract fun isCancelled ()Z
	public abstract fun setActualCancelled (Z)V
	public abstract fun setCancelled (Z)V
}

public final class dev/racci/minix/api/events/MinixCancellable$DefaultImpls {
	public static fun isCancelled (Ldev/racci/minix/api/events/MinixCancellable;)Z
	public static fun setCancelled (Ldev/racci/minix/api/events/MinixCancellable;Z)V
}

public abstract class dev/racci/minix/api/events/MinixEvent : org/bukkit/event/Event {
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getAsync ()Z
	public final fun getHandlers ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/PlatformListener : dev/racci/minix/api/extensions/KListener {
	public fun <init> (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun async (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public final fun close ()V
	public fun closeScope ()V
	public fun completableAsync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun completableSync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public final fun component1 ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public final fun copy (Ldev/racci/minix/api/plugin/MinixPlugin;)Ldev/racci/minix/api/events/PlatformListener;
	public static synthetic fun copy$default (Ldev/racci/minix/api/events/PlatformListener;Ldev/racci/minix/api/plugin/MinixPlugin;ILjava/lang/Object;)Ldev/racci/minix/api/events/PlatformListener;
	public fun deferredAsync (Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public fun deferredSync (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun equals (Ljava/lang/Object;)Z
	public fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public fun getDataFolder ()Ljava/nio/file/Path;
	public fun getKoin ()Lorg/koin/core/Koin;
	public fun getLogger ()Ldev/racci/minix/api/logger/MinixLogger;
	public fun getMinecraftContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun getScope ()Lorg/koin/core/scope/Scope;
	public fun hashCode ()I
	public fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun registerEvents ([Lorg/bukkit/event/Listener;)V
	public fun sync (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun toString ()Ljava/lang/String;
}

public abstract class dev/racci/minix/api/events/keybinds/ComboEvent : dev/racci/minix/api/events/player/MinixPlayerEvent {
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component2 ()Lorg/bukkit/inventory/ItemStack;
	public final fun component3 ()Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;
	public final fun component4 ()Lorg/bukkit/entity/Entity;
	public final fun getBlockData ()Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;
	public final fun getEntity ()Lorg/bukkit/entity/Entity;
	public fun getHasItem ()Z
	public final fun getItem ()Lorg/bukkit/inventory/ItemStack;
	public final fun isBlockEvent ()Z
	public final fun isEntityEvent ()Z
}

public final class dev/racci/minix/api/events/keybinds/ComboEvent$BlockData {
	public fun <init> (Lorg/bukkit/block/Block;Lorg/bukkit/block/BlockFace;)V
	public final fun component1 ()Lorg/bukkit/block/Block;
	public final fun component2 ()Lorg/bukkit/block/BlockFace;
	public final fun copy (Lorg/bukkit/block/Block;Lorg/bukkit/block/BlockFace;)Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;
	public static synthetic fun copy$default (Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/block/Block;Lorg/bukkit/block/BlockFace;ILjava/lang/Object;)Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBlock ()Lorg/bukkit/block/Block;
	public final fun getBlockFace ()Lorg/bukkit/block/BlockFace;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class dev/racci/minix/api/events/keybinds/OffhandComboEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component5 ()Lorg/bukkit/inventory/ItemStack;
	public fun getHasItem ()Z
	public final fun getOffHandItem ()Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/events/keybinds/PlayerDoubleOffhandEvent : dev/racci/minix/api/events/keybinds/OffhandComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerDoubleOffhandEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerDoubleOffhandEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerDoublePrimaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerDoublePrimaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerDoublePrimaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerDoubleSecondaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerDoubleSecondaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerDoubleSecondaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerOffhandEvent : dev/racci/minix/api/events/keybinds/OffhandComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerOffhandEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerOffhandEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerPrimaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerPrimaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerPrimaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSecondaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerSecondaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSecondaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakDoubleOffhandEvent : dev/racci/minix/api/events/keybinds/OffhandComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerSneakDoubleOffhandEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakDoubleOffhandEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakDoublePrimaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerSneakDoublePrimaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakDoublePrimaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakDoubleSecondaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerSneakDoubleSecondaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakDoubleSecondaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakOffhandEvent : dev/racci/minix/api/events/keybinds/OffhandComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerSneakOffhandEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakOffhandEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakPrimaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerSneakPrimaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakPrimaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakSecondaryEvent : dev/racci/minix/api/events/keybinds/ComboEvent {
	public static final field Companion Ldev/racci/minix/api/events/keybinds/PlayerSneakSecondaryEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/inventory/ItemStack;Ldev/racci/minix/api/events/keybinds/ComboEvent$BlockData;Lorg/bukkit/entity/Entity;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/keybinds/PlayerSneakSecondaryEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public abstract class dev/racci/minix/api/events/player/MinixPlayerEvent : org/bukkit/event/player/PlayerEvent {
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Z)V
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lorg/bukkit/entity/Player;
	public final fun getAsync ()Z
	public final fun getHandlers ()Lorg/bukkit/event/HandlerList;
	public final fun getMinixPlayer ()Ldev/racci/minix/api/data/MinixPlayer;
}

public final class dev/racci/minix/api/events/player/PlayerLightEvent : dev/racci/minix/api/events/player/MinixPlayerEvent {
	public static final field Companion Ldev/racci/minix/api/events/player/PlayerLightEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;IILdev/racci/minix/api/events/player/PlayerLightEvent$Cause;)V
	public final fun getCause ()Ldev/racci/minix/api/events/player/PlayerLightEvent$Cause;
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
	public final fun getNewLightLevel ()I
	public final fun getOldLightLevel ()I
}

public final class dev/racci/minix/api/events/player/PlayerLightEvent$Cause : java/lang/Enum {
	public static final field BLOCK_UPDATE Ldev/racci/minix/api/events/player/PlayerLightEvent$Cause;
	public static final field MOVEMENT Ldev/racci/minix/api/events/player/PlayerLightEvent$Cause;
	public static fun valueOf (Ljava/lang/String;)Ldev/racci/minix/api/events/player/PlayerLightEvent$Cause;
	public static fun values ()[Ldev/racci/minix/api/events/player/PlayerLightEvent$Cause;
}

public final class dev/racci/minix/api/events/player/PlayerLightEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/player/PlayerLiquidEnterEvent : dev/racci/minix/api/events/player/PlayerLiquidEvent {
	public static final field Companion Ldev/racci/minix/api/events/player/PlayerLiquidEnterEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/data/enums/LiquidType;Ldev/racci/minix/api/data/enums/LiquidType;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/player/PlayerLiquidEnterEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public abstract class dev/racci/minix/api/events/player/PlayerLiquidEvent : dev/racci/minix/api/events/player/MinixPlayerEvent {
	public synthetic fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/data/enums/LiquidType;Ldev/racci/minix/api/data/enums/LiquidType;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component2 ()Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun component3 ()Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun getNewType ()Ldev/racci/minix/api/data/enums/LiquidType;
	public final fun getPreviousType ()Ldev/racci/minix/api/data/enums/LiquidType;
}

public final class dev/racci/minix/api/events/player/PlayerLiquidExitEvent : dev/racci/minix/api/events/player/PlayerLiquidEvent {
	public static final field Companion Ldev/racci/minix/api/events/player/PlayerLiquidExitEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/data/enums/LiquidType;Ldev/racci/minix/api/data/enums/LiquidType;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/player/PlayerLiquidExitEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/player/PlayerMoveFullXYZEvent : dev/racci/minix/api/events/player/MinixPlayerEvent {
	public static final field Companion Ldev/racci/minix/api/events/player/PlayerMoveFullXYZEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/Location;Lorg/bukkit/Location;)V
	public final fun component2 ()Lorg/bukkit/Location;
	public final fun component3 ()Lorg/bukkit/Location;
	public final fun getFrom ()Lorg/bukkit/Location;
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
	public final fun getTo ()Lorg/bukkit/Location;
	public final fun setTo (Lorg/bukkit/Location;)V
}

public final class dev/racci/minix/api/events/player/PlayerMoveFullXYZEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/player/PlayerMoveXYZEvent : dev/racci/minix/api/events/player/MinixPlayerEvent {
	public static final field Companion Ldev/racci/minix/api/events/player/PlayerMoveXYZEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;Lorg/bukkit/Location;Lorg/bukkit/Location;)V
	public final fun component2 ()Lorg/bukkit/Location;
	public final fun component3 ()Lorg/bukkit/Location;
	public final fun getFrom ()Lorg/bukkit/Location;
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
	public final fun getTo ()Lorg/bukkit/Location;
	public final fun hasExplicitlyChangedBlock ()Z
	public final fun setTo (Lorg/bukkit/Location;)V
}

public final class dev/racci/minix/api/events/player/PlayerMoveXYZEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/player/PlayerUnloadEvent : dev/racci/minix/api/events/MinixEvent {
	public static final field Companion Ldev/racci/minix/api/events/player/PlayerUnloadEvent$Companion;
	public fun <init> (Ldev/racci/minix/api/data/MinixPlayer;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
	public final fun getMinixPlayer ()Ldev/racci/minix/api/data/MinixPlayer;
}

public final class dev/racci/minix/api/events/player/PlayerUnloadEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/player/WrappedPlayerQuitEvent {
	public final fun getPlayer ()Ldev/racci/minix/api/data/MinixPlayer;
	public final fun getWrappedEvent ()Ljava/lang/Object;
}

public final class dev/racci/minix/api/events/plugin/CaughtCoroutineExceptionEvent : dev/racci/minix/api/events/plugin/MinixPluginEvent, dev/racci/minix/api/events/MinixCancellable {
	public fun <init> (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/Throwable;)V
	public fun getActualCancelled ()Z
	public fun isCancelled ()Z
	public fun setActualCancelled (Z)V
	public fun setCancelled (Z)V
}

public abstract class dev/racci/minix/api/events/plugin/MinixPluginEvent : dev/racci/minix/api/events/MinixEvent {
	public fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
}

public final class dev/racci/minix/api/events/plugin/MinixPluginStateEvent : dev/racci/minix/api/events/plugin/MinixPluginEvent {
	public final fun getState ()Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
}

public final class dev/racci/minix/api/events/plugin/MinixPluginStateEvent$State : java/lang/Enum {
	public static final field DISABLE Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
	public static final field ENABLE Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
	public static final field LOAD Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
	public static final field RELOAD Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
	public static final field UNLOAD Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
	public static fun valueOf (Ljava/lang/String;)Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
	public static fun values ()[Ldev/racci/minix/api/events/plugin/MinixPluginStateEvent$State;
}

public final class dev/racci/minix/api/events/plugin/PluginCleanEvent : dev/racci/minix/api/events/plugin/MinixPluginEvent {
	public static final field Companion Ldev/racci/minix/api/events/plugin/PluginCleanEvent$Companion;
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/plugin/PluginCleanEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public abstract class dev/racci/minix/api/events/world/MinixWorldEvent : org/bukkit/event/world/WorldEvent, org/bukkit/event/Cancellable {
	public fun <init> (Lorg/bukkit/World;)V
	public final fun getHandlers ()Lorg/bukkit/event/HandlerList;
	public final fun isCancelled ()Z
	public final fun setCancelled (Z)V
}

public final class dev/racci/minix/api/events/world/WorldDayEvent : dev/racci/minix/api/events/world/MinixWorldEvent {
	public static final field Companion Ldev/racci/minix/api/events/world/WorldDayEvent$Companion;
	public fun <init> (Lorg/bukkit/World;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/world/WorldDayEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/world/WorldNightEvent : dev/racci/minix/api/events/world/MinixWorldEvent {
	public static final field Companion Ldev/racci/minix/api/events/world/WorldNightEvent$Companion;
	public fun <init> (Lorg/bukkit/World;)V
	public static fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/events/world/WorldNightEvent$Companion : dev/racci/minix/api/events/CompanionEventHandler {
	public fun getHandlerList ()Lorg/bukkit/event/HandlerList;
}

public final class dev/racci/minix/api/exceptions/MinixConfigException : java/lang/IllegalStateException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public fun <init> (Ljava/lang/Throwable;)V
}

public final class dev/racci/minix/api/exceptions/MissingPluginException : java/lang/Exception {
	public fun <init> (Ljava/lang/String;)V
}

public final class dev/racci/minix/api/exceptions/WrappingException : java/lang/RuntimeException {
}

public abstract class dev/racci/minix/api/extension/Extension : dev/racci/minix/api/extension/PlatformIndependentExtension, dev/racci/minix/flowbus/receiver/EventReceiver {
	public fun <init> ()V
	public fun createEventScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public final fun deferredSync (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun flowOf-tHAJEeM (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZ)Lkotlinx/coroutines/flow/Flow;
	public final fun getExceptionHandler (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineExceptionHandler;
	public final fun getSupervisorScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun isCancelled (Ljava/lang/Object;)Z
	public fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;Ldev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-ZYpfZMU (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public final fun sync (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;)V
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;)V
}

public abstract class dev/racci/minix/api/extension/ExtensionCompanion : org/koin/core/component/KoinComponent {
	public fun <init> ()V
	public fun getKoin ()Lorg/koin/core/Koin;
	public final fun getService ()Ldev/racci/minix/api/extension/Extension;
	public final fun getValue (Ldev/racci/minix/api/extension/ExtensionCompanion;Lkotlin/reflect/KProperty;)Ldev/racci/minix/api/extension/Extension;
	public final fun getValue (Ljava/lang/Object;Ljava/lang/Object;)Ldev/racci/minix/api/extension/Extension;
	public final fun inject ()Lkotlin/Lazy;
}

public abstract interface class dev/racci/minix/api/extension/ExtensionSkeleton : dev/racci/minix/api/lifecycles/ComplexManagedLifecycle, dev/racci/minix/api/plugin/WithPlugin, dev/racci/minix/flowbus/receiver/EventReceiver, org/koin/core/qualifier/Qualifier {
	public abstract fun getDispatcher ()Ldev/racci/minix/api/lifecycles/Closeable;
	public abstract fun getEventListener ()Ldev/racci/minix/api/events/PlatformListener;
	public abstract fun getState ()Ldev/racci/minix/api/extension/ExtensionState;
	public abstract fun getSupervisor ()Lkotlinx/coroutines/CoroutineScope;
	public abstract fun getValue ()Ljava/lang/String;
	public abstract fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public final class dev/racci/minix/api/extension/ExtensionSkeleton$DefaultImpls {
	public static fun async (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun closeScope (Ldev/racci/minix/api/extension/ExtensionSkeleton;)V
	public static fun completableAsync (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun completableSync (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun deferredAsync (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public static fun deferredSync (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun getContext (Ldev/racci/minix/api/extension/ExtensionSkeleton;)Lkotlin/coroutines/CoroutineContext;
	public static fun getCoroutineScope (Ldev/racci/minix/api/extension/ExtensionSkeleton;)Lkotlinx/coroutines/CoroutineScope;
	public static fun getDataFolder (Ldev/racci/minix/api/extension/ExtensionSkeleton;)Ljava/nio/file/Path;
	public static fun getKoin (Ldev/racci/minix/api/extension/ExtensionSkeleton;)Lorg/koin/core/Koin;
	public static fun getLogger (Ldev/racci/minix/api/extension/ExtensionSkeleton;)Ldev/racci/minix/api/logger/MinixLogger;
	public static fun getMinecraftContext (Ldev/racci/minix/api/extension/ExtensionSkeleton;)Lkotlin/coroutines/CoroutineContext;
	public static fun getScope (Ldev/racci/minix/api/extension/ExtensionSkeleton;)Lorg/koin/core/scope/Scope;
	public static fun handleDisable (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleEnable (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleLoad (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostDisable (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostEnable (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostLoad (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostUnload (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleReload (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleUnload (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun launch (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun registerEvents (Ldev/racci/minix/api/extension/ExtensionSkeleton;[Lorg/bukkit/event/Listener;)V
	public static fun sync (Ldev/racci/minix/api/extension/ExtensionSkeleton;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public final class dev/racci/minix/api/extension/ExtensionState : java/lang/Enum {
	public static final field DISABLED Ldev/racci/minix/api/extension/ExtensionState;
	public static final field DISABLING Ldev/racci/minix/api/extension/ExtensionState;
	public static final field ENABLED Ldev/racci/minix/api/extension/ExtensionState;
	public static final field ENABLING Ldev/racci/minix/api/extension/ExtensionState;
	public static final field LOADED Ldev/racci/minix/api/extension/ExtensionState;
	public static final field LOADING Ldev/racci/minix/api/extension/ExtensionState;
	public static final field UNLOADED Ldev/racci/minix/api/extension/ExtensionState;
	public static final field UNLOADING Ldev/racci/minix/api/extension/ExtensionState;
	public static fun valueOf (Ljava/lang/String;)Ldev/racci/minix/api/extension/ExtensionState;
	public static fun values ()[Ldev/racci/minix/api/extension/ExtensionState;
}

public final class dev/racci/minix/api/extension/ExtensionStateEvent {
	public fun <init> (Ldev/racci/minix/api/extension/Extension;Ldev/racci/minix/api/extension/ExtensionState;Ldev/racci/minix/api/extension/ExtensionState;)V
	public final fun component1 ()Ldev/racci/minix/api/extension/Extension;
	public final fun component2 ()Ldev/racci/minix/api/extension/ExtensionState;
	public final fun component3 ()Ldev/racci/minix/api/extension/ExtensionState;
	public final fun copy (Ldev/racci/minix/api/extension/Extension;Ldev/racci/minix/api/extension/ExtensionState;Ldev/racci/minix/api/extension/ExtensionState;)Ldev/racci/minix/api/extension/ExtensionStateEvent;
	public static synthetic fun copy$default (Ldev/racci/minix/api/extension/ExtensionStateEvent;Ldev/racci/minix/api/extension/Extension;Ldev/racci/minix/api/extension/ExtensionState;Ldev/racci/minix/api/extension/ExtensionState;ILjava/lang/Object;)Ldev/racci/minix/api/extension/ExtensionStateEvent;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getExtension ()Ldev/racci/minix/api/extension/Extension;
	public final fun getNewState ()Ldev/racci/minix/api/extension/ExtensionState;
	public final fun getPreState ()Ldev/racci/minix/api/extension/ExtensionState;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class dev/racci/minix/api/extension/PlatformIndependentExtension : dev/racci/minix/api/extension/ExtensionSkeleton {
	public final fun async (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun closeScope ()V
	public fun completableAsync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun completableSync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun deferredAsync (Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public fun deferredSync (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun equals (Ljava/lang/Object;)Z
	public fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public fun getDataFolder ()Ljava/nio/file/Path;
	public final fun getDispatcher ()Ldev/racci/minix/api/lifecycles/Closeable;
	public final fun getEventListener ()Ldev/racci/minix/api/events/PlatformListener;
	public fun getKoin ()Lorg/koin/core/Koin;
	public final fun getLogger ()Ldev/racci/minix/api/logger/MinixLogger;
	public fun getMinecraftContext ()Lkotlin/coroutines/CoroutineContext;
	public final fun getScope ()Lorg/koin/core/scope/Scope;
	public final fun getState ()Ldev/racci/minix/api/extension/ExtensionState;
	public final fun getSupervisor ()Lkotlinx/coroutines/CoroutineScope;
	public final fun getValue ()Ljava/lang/String;
	public fun handleDisable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleEnable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostDisable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostEnable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleReload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun hashCode ()I
	public final fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public final fun launchIn (Lkotlinx/coroutines/flow/Flow;)V
	public fun registerEvents ([Lorg/bukkit/event/Listener;)V
	public final fun setState (Ldev/racci/minix/api/extension/ExtensionState;)V
	public fun sync (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public final fun toString ()Ljava/lang/String;
}

public final class dev/racci/minix/api/extensions/Console : org/bukkit/command/ConsoleCommandSender {
	public static final field INSTANCE Ldev/racci/minix/api/extensions/Console;
	public fun abandonConversation (Lorg/bukkit/conversations/Conversation;)V
	public fun abandonConversation (Lorg/bukkit/conversations/Conversation;Lorg/bukkit/conversations/ConversationAbandonedEvent;)V
	public fun acceptConversationInput (Ljava/lang/String;)V
	public fun addAttachment (Lorg/bukkit/plugin/Plugin;)Lorg/bukkit/permissions/PermissionAttachment;
	public fun addAttachment (Lorg/bukkit/plugin/Plugin;I)Lorg/bukkit/permissions/PermissionAttachment;
	public fun addAttachment (Lorg/bukkit/plugin/Plugin;Ljava/lang/String;Z)Lorg/bukkit/permissions/PermissionAttachment;
	public fun addAttachment (Lorg/bukkit/plugin/Plugin;Ljava/lang/String;ZI)Lorg/bukkit/permissions/PermissionAttachment;
	public fun beginConversation (Lorg/bukkit/conversations/Conversation;)Z
	public final fun command (Ljava/lang/String;)Z
	public fun getEffectivePermissions ()Ljava/util/Set;
	public fun getName ()Ljava/lang/String;
	public fun getServer ()Lorg/bukkit/Server;
	public fun hasPermission (Ljava/lang/String;)Z
	public fun hasPermission (Lorg/bukkit/permissions/Permission;)Z
	public fun isConversing ()Z
	public fun isOp ()Z
	public fun isPermissionSet (Ljava/lang/String;)Z
	public fun isPermissionSet (Lorg/bukkit/permissions/Permission;)Z
	public fun name ()Lnet/kyori/adventure/text/Component;
	public fun recalculatePermissions ()V
	public fun removeAttachment (Lorg/bukkit/permissions/PermissionAttachment;)V
	public fun sendMessage (Ljava/lang/String;)V
	public fun sendMessage (Ljava/util/UUID;Ljava/lang/String;)V
	public fun sendMessage (Ljava/util/UUID;[Ljava/lang/String;)V
	public fun sendMessage ([Ljava/lang/String;)V
	public fun sendRawMessage (Ljava/lang/String;)V
	public fun sendRawMessage (Ljava/util/UUID;Ljava/lang/String;)V
	public fun setOp (Z)V
	public fun spigot ()Lorg/bukkit/command/CommandSender$Spigot;
}

public final class dev/racci/minix/api/extensions/ExBlockKt {
	public static final fun sendBlockChange (Lorg/bukkit/block/Block;Lorg/bukkit/Material;Lkotlin/jvm/functions/Function1;[Lorg/bukkit/entity/Player;)V
	public static final fun sendBlockChange (Lorg/bukkit/block/Block;Lorg/bukkit/block/data/BlockData;[Lorg/bukkit/entity/Player;)V
}

public final class dev/racci/minix/api/extensions/ExBukkitKt {
	public static final fun broadcast (Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)V
	public static final fun broadcast (Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)V
	public static final fun broadcast (Lnet/kyori/adventure/text/Component;)I
	public static final fun broadcast ([Lorg/bukkit/entity/Player;Lkotlin/jvm/functions/Function1;)V
	public static synthetic fun broadcast$default (Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
	public static final fun getPm ()Lorg/bukkit/plugin/PluginManager;
	public static final fun getServer ()Lorg/bukkit/Server;
}

public final class dev/racci/minix/api/extensions/ExCommandKt {
	public static final fun getKnownCommandsField ()Ljava/lang/reflect/Field;
	public static final fun getServerCommands ()Lorg/bukkit/command/SimpleCommandMap;
}

public final class dev/racci/minix/api/extensions/ExEntityKt {
	public static final fun hasOwner (Lorg/bukkit/entity/Entity;)Z
	public static final fun isTamed (Lorg/bukkit/entity/Entity;)Z
}

public final class dev/racci/minix/api/extensions/ExEventKt {
	public static final fun callEvent (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function1;)Z
	public static final fun cancel (Lorg/bukkit/event/Cancellable;)V
	public static final fun convertBukkitPriority (Lorg/bukkit/event/EventPriority;)I
	public static final fun event (Lorg/bukkit/event/Listener;Lkotlin/reflect/KClass;Ldev/racci/minix/api/plugin/MinixPlugin;Lorg/bukkit/event/EventPriority;ZZLkotlin/jvm/functions/Function2;)V
	public static synthetic fun event$default (Lorg/bukkit/event/Listener;Lkotlin/reflect/KClass;Ldev/racci/minix/api/plugin/MinixPlugin;Lorg/bukkit/event/EventPriority;ZZLkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
	public static final fun events (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function1;)Ldev/racci/minix/api/extensions/SimpleKListener;
	public static final fun events (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/jvm/functions/Function1;)Ldev/racci/minix/api/extensions/SimpleKListener;
	public static final fun events (Ldev/racci/minix/api/plugin/WithPlugin;[Lkotlin/reflect/KClass;Lorg/bukkit/event/EventPriority;ZZLdev/racci/minix/api/extensions/SimpleKListener;Lkotlin/jvm/functions/Function2;)V
	public static synthetic fun events$default (Ldev/racci/minix/api/plugin/WithPlugin;[Lkotlin/reflect/KClass;Lorg/bukkit/event/EventPriority;ZZLdev/racci/minix/api/extensions/SimpleKListener;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
	public static final fun getDisplaced (Lorg/bukkit/event/player/PlayerMoveEvent;)Z
	public static final fun registerEvents (Lorg/bukkit/event/Listener;Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public static final fun unregisterListener (Lorg/bukkit/event/Listener;)V
}

public final class dev/racci/minix/api/extensions/ExInventoryKt {
	public static final fun getHasSpace (Lorg/bukkit/inventory/Inventory;)Z
	public static final fun hasSpace (Lorg/bukkit/inventory/Inventory;Lorg/bukkit/inventory/ItemStack;I)Z
	public static synthetic fun hasSpace$default (Lorg/bukkit/inventory/Inventory;Lorg/bukkit/inventory/ItemStack;IILjava/lang/Object;)Z
	public static final fun spaceOf (Lorg/bukkit/inventory/Inventory;Lorg/bukkit/inventory/ItemStack;)I
}

public final class dev/racci/minix/api/extensions/ExItemStackKt {
	public static final fun asItemStack (Lorg/bukkit/Material;ILkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/meta/ItemMeta;
	public static synthetic fun asItemStack$default (Lorg/bukkit/Material;ILkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/meta/ItemMeta;
	public static final fun displayName (Lorg/bukkit/inventory/ItemStack;Lnet/kyori/adventure/text/Component;)Lorg/bukkit/inventory/meta/ItemMeta;
	public static final fun getPdc (Lorg/bukkit/inventory/ItemStack;)Lorg/bukkit/persistence/PersistentDataContainer;
	public static final fun getTexture (Lorg/bukkit/inventory/meta/SkullMeta;)Ljava/lang/String;
	public static final fun isAxe (Lorg/bukkit/Material;)Z
	public static final fun isDoor (Lorg/bukkit/Material;)Z
	public static final fun isHoe (Lorg/bukkit/Material;)Z
	public static final fun isIngot (Lorg/bukkit/Material;)Z
	public static final fun isLava (Lorg/bukkit/Material;)Z
	public static final fun isMinecart (Lorg/bukkit/Material;)Z
	public static final fun isOre (Lorg/bukkit/Material;)Z
	public static final fun isPickaxe (Lorg/bukkit/Material;)Z
	public static final fun isSpade (Lorg/bukkit/Material;)Z
	public static final fun isSword (Lorg/bukkit/Material;)Z
	public static final fun isWater (Lorg/bukkit/Material;)Z
	public static final fun pdc (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/persistence/PersistentDataContainer;
}

public final class dev/racci/minix/api/extensions/ExLocationKt {
	public static final fun dropItem (Lorg/bukkit/Location;Lorg/bukkit/inventory/ItemStack;)Lorg/bukkit/entity/Item;
	public static final fun dropItemNaturally (Lorg/bukkit/Location;Lorg/bukkit/inventory/ItemStack;)Lorg/bukkit/entity/Item;
	public static final fun generateTree (Lorg/bukkit/Location;Lorg/bukkit/TreeType;)Z
	public static final fun isDay (Lorg/bukkit/Location;)Z
	public static final fun isNight (Lorg/bukkit/Location;)Z
	public static final fun playEffect (Lorg/bukkit/Location;Lorg/bukkit/Effect;I)V
	public static final fun playEffect (Lorg/bukkit/Location;Lorg/bukkit/Effect;II)V
	public static final fun playEffect (Lorg/bukkit/Location;Lorg/bukkit/Effect;Ljava/lang/Object;)V
	public static final fun playEffect (Lorg/bukkit/Location;Lorg/bukkit/Effect;Ljava/lang/Object;I)V
	public static final fun playSound (Lorg/bukkit/Location;Lorg/bukkit/Sound;FF)V
	public static final fun spawnArrow (Lorg/bukkit/Location;Lorg/bukkit/util/Vector;FF)Lorg/bukkit/entity/Arrow;
	public static final fun strikeLightning (Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;
	public static final fun strikeLightningEffect (Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;
}

public final class dev/racci/minix/api/extensions/ExMCVersionKt {
	public static final fun getCurrentVersion (Ldev/racci/minix/api/utils/minecraft/MCVersion$Companion;)Ldev/racci/minix/api/utils/minecraft/MCVersion;
	public static final fun getSupportsDuelWielding (Ldev/racci/minix/api/utils/minecraft/MCVersion$Companion;)Z
	public static final fun getSupportsRGB (Ldev/racci/minix/api/utils/minecraft/MCVersion$Companion;)Z
	public static final fun getSupportsUUIDs (Ldev/racci/minix/api/utils/minecraft/MCVersion$Companion;)Z
}

public final class dev/racci/minix/api/extensions/ExMaterialKt {
	public static final fun toItemStack (Lorg/bukkit/Material;ILkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public static synthetic fun toItemStack$default (Lorg/bukkit/Material;ILkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/extensions/ExNamespaceKt {
	public static final fun toNamespacedKey (Ljava/lang/String;)Lorg/bukkit/NamespacedKey;
}

public final class dev/racci/minix/api/extensions/ExPermissionKt {
	public static final fun allPermission (Lorg/bukkit/permissions/Permissible;[Ljava/lang/String;)Z
	public static final fun anyPermission (Lorg/bukkit/permissions/Permissible;[Ljava/lang/String;)Z
	public static final fun hasPermissionOrStar (Lorg/bukkit/permissions/Permissible;Ljava/lang/String;)Z
}

public final class dev/racci/minix/api/extensions/ExPersistentDataHolderKt {
	public static final fun getPdc (Lorg/bukkit/persistence/PersistentDataHolder;)Lorg/bukkit/persistence/PersistentDataContainer;
	public static final fun pdc (Lorg/bukkit/persistence/PersistentDataHolder;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/persistence/PersistentDataContainer;
}

public final class dev/racci/minix/api/extensions/ExPlayerKt {
	public static final fun getInEnd (Lorg/bukkit/entity/Player;)Z
	public static final fun getInNether (Lorg/bukkit/entity/Player;)Z
	public static final fun getInOverworld (Lorg/bukkit/entity/Player;)Z
	public static final fun isDay (Lorg/bukkit/entity/Player;)Z
	public static final fun isNight (Lorg/bukkit/entity/Player;)Z
	public static final fun isOwner (Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
}

public final class dev/racci/minix/api/extensions/ExPosKt {
	public static final fun asBlockPos (Lorg/bukkit/Location;)Ldev/racci/minix/data/structs/minecraft/BlockPos;
	public static final fun asBukkitBlock (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Lorg/bukkit/block/Block;
	public static final fun asBukkitBlock (Ldev/racci/minix/data/structs/minecraft/LocationPos;Lorg/bukkit/World;)Lorg/bukkit/block/Block;
	public static final fun asBukkitLocation (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Lorg/bukkit/Location;
	public static final fun asBukkitLocation (Ldev/racci/minix/data/structs/minecraft/LocationPos;Lorg/bukkit/World;)Lorg/bukkit/Location;
	public static final fun asPos (Lorg/bukkit/Chunk;)Ldev/racci/minix/data/structs/minecraft/ChunkPos;
	public static final fun asPos (Lorg/bukkit/Location;)Ldev/racci/minix/data/structs/minecraft/LocationPos;
	public static final fun asPos (Lorg/bukkit/block/Block;)Ldev/racci/minix/data/structs/minecraft/BlockPos;
}

public final class dev/racci/minix/api/extensions/ExPosRangeKt {
	public static final fun contains (Ldev/racci/minix/data/structs/minecraft/range/PosRange;Lorg/bukkit/Chunk;)Z
	public static final fun contains (Ldev/racci/minix/data/structs/minecraft/range/PosRange;Lorg/bukkit/Location;)Z
	public static final fun contains (Ldev/racci/minix/data/structs/minecraft/range/PosRange;Lorg/bukkit/block/Block;)Z
	public static final fun rangeTo (Lorg/bukkit/Chunk;Lorg/bukkit/Chunk;)Ldev/racci/minix/data/structs/minecraft/range/PosRange;
	public static final fun rangeTo (Lorg/bukkit/Location;Lorg/bukkit/Location;)Ldev/racci/minix/data/structs/minecraft/range/PosRange;
	public static final fun rangeTo (Lorg/bukkit/block/Block;Lorg/bukkit/block/Block;)Ldev/racci/minix/data/structs/minecraft/range/PosRange;
}

public final class dev/racci/minix/api/extensions/ExSchedulerKt {
	public static final fun scheduler (Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineRunnable;
	public static final fun task-uklvIs0 (Lkotlin/time/Duration;Lkotlin/time/Duration;Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun task-uklvIs0$default (Lkotlin/time/Duration;Lkotlin/time/Duration;Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static final fun task-w8mxNcw (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static final fun task-w8mxNcw (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun task-w8mxNcw$default (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun task-w8mxNcw$default (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static final fun task-xKcISBE (Lkotlin/time/Duration;Lkotlin/time/Duration;ZLdev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun task-xKcISBE$default (Lkotlin/time/Duration;Lkotlin/time/Duration;ZLdev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static final fun taskAsync-uklvIs0 (Lkotlin/time/Duration;Lkotlin/time/Duration;Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun taskAsync-uklvIs0$default (Lkotlin/time/Duration;Lkotlin/time/Duration;Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static final fun taskAsync-w8mxNcw (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static final fun taskAsync-w8mxNcw (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun taskAsync-w8mxNcw$default (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun taskAsync-w8mxNcw$default (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/time/Duration;Lkotlin/time/Duration;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
}

public final class dev/racci/minix/api/extensions/ExServerKt {
	public static final fun addRecipe (Lorg/bukkit/inventory/Recipe;)Z
	public static final fun cachedOfflinePlayer (Ljava/lang/String;)Lorg/bukkit/OfflinePlayer;
	public static final fun create (Lorg/bukkit/WorldCreator;)Lorg/bukkit/World;
	public static final fun getAllowEnd ()Z
	public static final fun getAllowFlight ()Z
	public static final fun getAllowNether ()Z
	public static final fun getAmbientSpawnLimit ()I
	public static final fun getAnimalSpawnLimit ()I
	public static final fun getBannedPlayers ()Ljava/util/Set;
	public static final fun getConnectionThrottle ()J
	public static final fun getDefaultGameMode ()Lorg/bukkit/GameMode;
	public static final fun getGenerateStructures ()Z
	public static final fun getIdleTimeout ()I
	public static final fun getIpBans ()Ljava/util/Set;
	public static final fun getMessenger ()Lorg/bukkit/plugin/messaging/Messenger;
	public static final fun getMonsterSpawnLimit ()I
	public static final fun getOnlineMode ()Z
	public static final fun getOnlinePlayers ()Ljava/util/Collection;
	public static final fun getOperators ()Ljava/util/Set;
	public static final fun getPluginManager ()Lorg/bukkit/plugin/PluginManager;
	public static final fun getRecipes ()Ljava/util/Iterator;
	public static final fun getScheduler ()Lorg/bukkit/scheduler/BukkitScheduler;
	public static final fun getScoreboardManager ()Lorg/bukkit/scoreboard/ScoreboardManager;
	public static final fun getServicesManager ()Lorg/bukkit/plugin/ServicesManager;
	public static final fun getSpawnRadius ()I
	public static final fun getTicksPerAnimalSpawns ()I
	public static final fun getTicksPerMonsterSpawns ()I
	public static final fun getUpdateFolder ()Ljava/lang/String;
	public static final fun getUpdateFolderFile ()Ljava/io/File;
	public static final fun getWhitelist ()Z
	public static final fun getWhitelistedPlayers ()Ljava/util/Set;
	public static final fun getWorldContainer ()Ljava/io/File;
	public static final fun getWorldType ()Ljava/lang/String;
	public static final fun getWorlds ()Ljava/util/List;
	public static final fun isHardcore ()Z
	public static final fun isPrimaryThread ()Z
	public static final fun matchPlayer (Ljava/lang/String;)Ljava/util/List;
	public static final fun offlinePlayer (Ljava/lang/String;)Lorg/bukkit/OfflinePlayer;
	public static final fun offlinePlayer (Ljava/util/UUID;)Lorg/bukkit/OfflinePlayer;
	public static final fun player (Ljava/lang/String;)Lorg/bukkit/entity/Player;
	public static final fun player (Ljava/util/UUID;)Lorg/bukkit/entity/Player;
	public static final fun playerExact (Ljava/lang/String;)Lorg/bukkit/entity/Player;
	public static final fun recipesFor (Lorg/bukkit/inventory/ItemStack;)Ljava/util/List;
	public static final fun reloadWhitelist ()V
	public static final fun setDefaultGameMode (Lorg/bukkit/GameMode;)V
	public static final fun setIdleTimeout (I)V
	public static final fun setSpawnRadius (I)V
	public static final fun setWhitelist (Z)V
	public static final fun world (Ljava/lang/String;)Lorg/bukkit/World;
}

public final class dev/racci/minix/api/extensions/ExTimeKt {
	public static final fun getInWholeTicks-LRDsOJo (J)J
	public static final fun getTicks (Ljava/lang/Number;)J
}

public final class dev/racci/minix/api/extensions/ExWithPluginKt {
	public static final fun deleteProperty (Ldev/racci/minix/api/plugin/WithPlugin;Ljava/lang/String;)V
	public static final fun getProperty (Ldev/racci/minix/api/plugin/WithPlugin;Ljava/lang/String;)Ljava/lang/Object;
	public static final fun getProperty (Ldev/racci/minix/api/plugin/WithPlugin;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun setProperty (Ldev/racci/minix/api/plugin/WithPlugin;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/extensions/ExWorldEventKt {
	public static final fun isCustom (Lorg/bukkit/event/world/WorldEvent;)Z
	public static final fun isEnd (Lorg/bukkit/event/world/WorldEvent;)Z
	public static final fun isNether (Lorg/bukkit/event/world/WorldEvent;)Z
	public static final fun isOverworld (Lorg/bukkit/event/world/WorldEvent;)Z
}

public final class dev/racci/minix/api/extensions/ExWorldKt {
	public static final fun isEnd (Lorg/bukkit/World;)Z
	public static final fun isNether (Lorg/bukkit/World;)Z
	public static final fun isNight (Lorg/bukkit/World;)Z
	public static final fun isOverworld (Lorg/bukkit/World;)Z
}

public abstract interface class dev/racci/minix/api/extensions/KListener : dev/racci/minix/api/plugin/WithPlugin, org/bukkit/event/Listener {
}

public final class dev/racci/minix/api/extensions/KListener$DefaultImpls {
	public static fun async (Ldev/racci/minix/api/extensions/KListener;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun closeScope (Ldev/racci/minix/api/extensions/KListener;)V
	public static fun completableAsync (Ldev/racci/minix/api/extensions/KListener;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun completableSync (Ldev/racci/minix/api/extensions/KListener;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun deferredAsync (Ldev/racci/minix/api/extensions/KListener;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public static fun deferredSync (Ldev/racci/minix/api/extensions/KListener;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun getContext (Ldev/racci/minix/api/extensions/KListener;)Lkotlin/coroutines/CoroutineContext;
	public static fun getCoroutineScope (Ldev/racci/minix/api/extensions/KListener;)Lkotlinx/coroutines/CoroutineScope;
	public static fun getDataFolder (Ldev/racci/minix/api/extensions/KListener;)Ljava/nio/file/Path;
	public static fun getKoin (Ldev/racci/minix/api/extensions/KListener;)Lorg/koin/core/Koin;
	public static fun getLogger (Ldev/racci/minix/api/extensions/KListener;)Ldev/racci/minix/api/logger/MinixLogger;
	public static fun getMinecraftContext (Ldev/racci/minix/api/extensions/KListener;)Lkotlin/coroutines/CoroutineContext;
	public static fun getScope (Ldev/racci/minix/api/extensions/KListener;)Lorg/koin/core/scope/Scope;
	public static fun launch (Ldev/racci/minix/api/extensions/KListener;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun registerEvents (Ldev/racci/minix/api/extensions/KListener;[Lorg/bukkit/event/Listener;)V
	public static fun sync (Ldev/racci/minix/api/extensions/KListener;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public abstract interface class dev/racci/minix/api/extensions/KotlinListener : org/bukkit/event/Listener {
}

public final class dev/racci/minix/api/extensions/SimpleKListener : dev/racci/minix/api/extensions/KListener {
	public fun <init> (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun async (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun closeScope ()V
	public fun completableAsync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun completableSync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public final fun component1 ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public final fun copy (Ldev/racci/minix/api/plugin/MinixPlugin;)Ldev/racci/minix/api/extensions/SimpleKListener;
	public static synthetic fun copy$default (Ldev/racci/minix/api/extensions/SimpleKListener;Ldev/racci/minix/api/plugin/MinixPlugin;ILjava/lang/Object;)Ldev/racci/minix/api/extensions/SimpleKListener;
	public fun deferredAsync (Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public fun deferredSync (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun equals (Ljava/lang/Object;)Z
	public fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public fun getDataFolder ()Ljava/nio/file/Path;
	public fun getKoin ()Lorg/koin/core/Koin;
	public fun getLogger ()Ldev/racci/minix/api/logger/MinixLogger;
	public fun getMinecraftContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun getScope ()Lorg/koin/core/scope/Scope;
	public fun hashCode ()I
	public fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun registerEvents ([Lorg/bukkit/event/Listener;)V
	public fun sync (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun toString ()Ljava/lang/String;
}

public final class dev/racci/minix/api/flow/EventFlowKt {
	public static final fun eventFlow (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;Lorg/bukkit/event/Listener;)Lkotlinx/coroutines/flow/Flow;
	public static final fun eventFlow (Lkotlin/reflect/KClass;Ldev/racci/minix/api/plugin/MinixPlugin;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;Lorg/bukkit/event/Listener;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun eventFlow$default (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;Lorg/bukkit/event/Listener;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun eventFlow$default (Lkotlin/reflect/KClass;Ldev/racci/minix/api/plugin/MinixPlugin;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;Lorg/bukkit/event/Listener;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
}

public final class dev/racci/minix/api/flow/ExtensionsKt {
	public static final fun playerEventFlow (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;)Lkotlinx/coroutines/flow/Flow;
	public static final fun playerEventFlow (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;)Lkotlinx/coroutines/flow/Flow;
	public static final fun playerEventFlow (Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Ldev/racci/minix/api/plugin/MinixPlugin;Lorg/bukkit/event/EventPriority;ZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun playerEventFlow$default (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun playerEventFlow$default (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Lorg/bukkit/event/EventPriority;ZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
	public static synthetic fun playerEventFlow$default (Lkotlin/reflect/KClass;Lorg/bukkit/entity/Player;Ldev/racci/minix/api/plugin/MinixPlugin;Lorg/bukkit/event/EventPriority;ZLkotlinx/coroutines/channels/Channel;Lorg/bukkit/event/Listener;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;
}

public abstract class dev/racci/minix/api/integrations/placeholders/PlaceholderIntegration : me/clip/placeholderapi/expansion/PlaceholderExpansion, dev/racci/minix/integrations/Integration {
	public fun <init> ()V
	public final fun getAuthor ()Ljava/lang/String;
	public final fun getIdentifier ()Ljava/lang/String;
	public final fun getVersion ()Ljava/lang/String;
	public fun handleEnable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun handleLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun onPlaceholderRequest (Lorg/bukkit/entity/Player;Ljava/lang/String;)Ljava/lang/String;
	public final fun onRequest (Lorg/bukkit/OfflinePlayer;Ljava/lang/String;)Ljava/lang/String;
	public final fun persist ()Z
	public final fun registerOfflinePlaceholder (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Larrow/core/Ior;
	public final fun registerOnlinePlaceholder (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Larrow/core/Ior;
	public final fun registerPlaceholder (Ljava/lang/String;Lkotlin/jvm/functions/Function0;)Larrow/core/Ior;
}

public final class dev/racci/minix/api/integrations/placeholders/PlaceholderManager : dev/racci/minix/integrations/IntegrationManager {
	public static final field INSTANCE Ldev/racci/minix/api/integrations/placeholders/PlaceholderManager;
}

public abstract interface class dev/racci/minix/api/integrations/regions/Region {
	public abstract fun canAttack (Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
	public abstract fun canBreak (Lorg/bukkit/entity/Player;)Z
	public abstract fun canBuild (Lorg/bukkit/entity/Player;)Z
	public abstract fun canInteract (Lorg/bukkit/entity/Player;)Z
	public abstract fun getId ()I
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getOwner ()Ljava/util/UUID;
	public abstract fun getWorld ()Lorg/bukkit/World;
}

public abstract interface class dev/racci/minix/api/integrations/regions/RegionIntegration : dev/racci/minix/integrations/Integration {
	public abstract fun canAttack (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
	public abstract fun canBreak (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public abstract fun canBuild (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public abstract fun canInteract (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public abstract fun getRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Larrow/core/Option;
	public abstract fun ifTrustedInRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/entity/Player;Lkotlin/jvm/functions/Function0;)Z
	public abstract fun ifWilderness (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lkotlin/jvm/functions/Function0;)Z
	public abstract fun ifWildernessOrTrusted (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/entity/Player;Lkotlin/jvm/functions/Function0;)Z
	public abstract fun insideRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Z
}

public final class dev/racci/minix/api/integrations/regions/RegionIntegration$DefaultImpls {
	public static fun handleEnable (Ldev/racci/minix/api/integrations/regions/RegionIntegration;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleLoad (Ldev/racci/minix/api/integrations/regions/RegionIntegration;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleUnload (Ldev/racci/minix/api/integrations/regions/RegionIntegration;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/integrations/regions/RegionManager : dev/racci/minix/integrations/IntegrationManager {
	public static final field INSTANCE Ldev/racci/minix/api/integrations/regions/RegionManager;
	public final fun canAttack (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
	public final fun canBreak (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public final fun canBuild (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public final fun canInteract (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public final fun getRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Larrow/core/Option;
	public final fun ifTrustedInRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/entity/Player;Lkotlin/jvm/functions/Function0;)Z
	public final fun ifWilderness (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lkotlin/jvm/functions/Function0;)Z
	public final fun ifWildernessOrTrusted (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/entity/Player;Lkotlin/jvm/functions/Function0;)Z
	public final fun insideRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Z
}

public final class dev/racci/minix/api/logger/LoggingLevel : java/lang/Enum {
	public static final field Companion Ldev/racci/minix/api/logger/LoggingLevel$Companion;
	public static final field DEBUG Ldev/racci/minix/api/logger/LoggingLevel;
	public static final field ERROR Ldev/racci/minix/api/logger/LoggingLevel;
	public static final field FATAL Ldev/racci/minix/api/logger/LoggingLevel;
	public static final field INFO Ldev/racci/minix/api/logger/LoggingLevel;
	public static final field TRACE Ldev/racci/minix/api/logger/LoggingLevel;
	public static final field WARN Ldev/racci/minix/api/logger/LoggingLevel;
	public final fun getLevel ()I
	public static fun valueOf (Ljava/lang/String;)Ldev/racci/minix/api/logger/LoggingLevel;
	public static fun values ()[Ldev/racci/minix/api/logger/LoggingLevel;
}

public final class dev/racci/minix/api/logger/LoggingLevel$Companion {
	public final fun getCONVERTERS ()Ljava/util/Map;
	public final fun setCONVERTERS (Ljava/util/Map;)V
}

public abstract class dev/racci/minix/api/logger/MinixLogger {
	public static final field Companion Ldev/racci/minix/api/logger/MinixLogger$Companion;
	public fun <init> (Ldev/racci/minix/api/logger/LoggingLevel;)V
	public fun debug (Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;)V
	public static synthetic fun debug$default (Ldev/racci/minix/api/logger/MinixLogger;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public fun error (Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;)V
	public static synthetic fun error$default (Ldev/racci/minix/api/logger/MinixLogger;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public fun fatal (Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;)Ldev/racci/minix/api/exceptions/NoTraceException;
	public static synthetic fun fatal$default (Ldev/racci/minix/api/logger/MinixLogger;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)Ldev/racci/minix/api/exceptions/NoTraceException;
	protected fun format (Ljava/lang/String;Ljava/lang/String;Ldev/racci/minix/api/logger/LoggingLevel;Ljava/lang/Throwable;Lcom/github/ajalt/mordant/rendering/TextColors;)Ljava/lang/String;
	protected final fun getAtomicLevel ()Lkotlinx/atomicfu/AtomicRef;
	protected final fun getAtomicLock ()Lkotlinx/atomicfu/AtomicBoolean;
	protected abstract fun getCallerScope ()Ljava/lang/String;
	protected fun getDispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
	public final fun getLevel ()Ldev/racci/minix/api/logger/LoggingLevel;
	public final fun getLogLevel ()Ldev/racci/minix/api/logger/LoggingLevel;
	public fun info (Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;)V
	public static synthetic fun info$default (Ldev/racci/minix/api/logger/MinixLogger;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public final fun isEnabled (Ldev/racci/minix/api/logger/LoggingLevel;)Z
	protected fun log (Ldev/racci/minix/api/logger/LoggingLevel;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;Lcom/github/ajalt/mordant/rendering/TextColors;)V
	public static synthetic fun log$default (Ldev/racci/minix/api/logger/MinixLogger;Ldev/racci/minix/api/logger/LoggingLevel;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;Lcom/github/ajalt/mordant/rendering/TextColors;ILjava/lang/Object;)V
	protected fun preProcess (Ldev/racci/minix/api/logger/LoggingLevel;Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;)V
	protected fun printLog (Ldev/racci/minix/api/logger/MinixLogger$FormattedMessage;)V
	public final fun setLevel (Ldev/racci/minix/api/logger/LoggingLevel;)Ldev/racci/minix/api/logger/LoggingLevel;
	public fun trace (Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;)V
	public static synthetic fun trace$default (Ldev/racci/minix/api/logger/MinixLogger;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
	public fun warn (Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;)V
	public static synthetic fun warn$default (Ldev/racci/minix/api/logger/MinixLogger;Ljava/lang/Throwable;Ljava/lang/String;Lkotlin/jvm/functions/Function0;ILjava/lang/Object;)V
}

public final class dev/racci/minix/api/logger/MinixLogger$Companion {
}

public final class dev/racci/minix/api/logger/MinixLogger$FormattedMessage {
	public fun <init> (Ldev/racci/minix/api/logger/MinixLogger;Ljava/lang/String;Ljava/lang/String;Ldev/racci/minix/api/logger/LoggingLevel;Ljava/lang/Throwable;Lcom/github/ajalt/mordant/rendering/TextColors;)V
	public fun <init> (Ldev/racci/minix/api/logger/MinixLogger;Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ldev/racci/minix/api/logger/LoggingLevel;Ljava/lang/Throwable;Lcom/github/ajalt/mordant/rendering/TextColors;)V
	public final fun getFormatted ()Ljava/lang/String;
	public final fun getLevel ()Ldev/racci/minix/api/logger/LoggingLevel;
	public final fun getRaw ()Ljava/lang/String;
	public final fun getRendered ()Ljava/lang/String;
	public final fun getScope ()Ljava/lang/String;
	public final fun getThrowable ()Ljava/lang/Throwable;
}

public final class dev/racci/minix/api/logger/MinixLoggerFactory : org/koin/core/component/KoinComponent {
	public static final field INSTANCE Ldev/racci/minix/api/logger/MinixLoggerFactory;
	public fun getKoin ()Lorg/koin/core/Koin;
	public final fun getValue (Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ldev/racci/minix/api/logger/MinixLogger;
}

public abstract interface class dev/racci/minix/api/logger/converters/LoggerConverter {
	public abstract fun convert (Ldev/racci/minix/api/logger/LoggingLevel;)Ljava/lang/Object;
	public abstract fun convert (Ljava/lang/Object;)Ldev/racci/minix/api/logger/LoggingLevel;
}

public abstract interface class dev/racci/minix/api/paper/builders/BannerBuilder : dev/racci/minix/api/paper/builders/BaseItemBuilder {
	public abstract fun addPattern ([Lorg/bukkit/block/banner/Pattern;)Ldev/racci/minix/api/paper/builders/BannerBuilder;
	public abstract fun getBaseColour ()Lorg/bukkit/Material;
	public abstract fun getPatterns ()Ljava/util/List;
	public abstract fun setBaseColour (Lorg/bukkit/Material;)V
	public abstract fun setPatterns (Ljava/util/List;)V
}

public abstract interface class dev/racci/minix/api/paper/builders/BaseItemBuilder {
	public abstract fun addEnchant ([Lkotlin/Pair;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun addFlag ([Lorg/bukkit/inventory/ItemFlag;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun addModifier (Lorg/bukkit/attribute/Attribute;[Lorg/bukkit/attribute/AttributeModifier;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun build ()Lorg/bukkit/inventory/ItemStack;
	public abstract fun clearModifiers (Lorg/bukkit/attribute/Attribute;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun getAmount ()I
	public abstract fun getAttributeModifiers ()Lcom/google/common/collect/Multimap;
	public abstract fun getDestroyableKeys ()Ljava/util/Set;
	public abstract fun getGlowing ()Z
	public abstract fun getItemFlags ()Ljava/util/Set;
	public abstract fun getItemStack ()Lorg/bukkit/inventory/ItemStack;
	public abstract fun getLore ()Ljava/util/List;
	public abstract fun getMeta ()Lorg/bukkit/inventory/meta/ItemMeta;
	public abstract fun getModel ()Ljava/lang/Integer;
	public abstract fun getName ()Lnet/kyori/adventure/text/Component;
	public abstract fun getPlaceableKeys ()Ljava/util/Set;
	public abstract fun isUnbreakable ()Z
	public abstract fun lore ([Lnet/kyori/adventure/text/Component;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun pdc (Lkotlin/jvm/functions/Function1;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun removeEnchant ([Lorg/bukkit/enchantments/Enchantment;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun removeFlag ([Lorg/bukkit/inventory/ItemFlag;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun removeModifier (Lorg/bukkit/attribute/Attribute;[Lorg/bukkit/attribute/AttributeModifier;)Ldev/racci/minix/api/paper/builders/BaseItemBuilder;
	public abstract fun setAmount (I)V
	public abstract fun setAttributeModifiers (Lcom/google/common/collect/Multimap;)V
	public abstract fun setDestroyableKeys (Ljava/util/Set;)V
	public abstract fun setGlowing (Z)V
	public abstract fun setItemFlags (Ljava/util/Set;)V
	public abstract fun setItemStack (Lorg/bukkit/inventory/ItemStack;)V
	public abstract fun setLore (Ljava/util/List;)V
	public abstract fun setMeta (Lorg/bukkit/inventory/meta/ItemMeta;)V
	public abstract fun setModel (Ljava/lang/Integer;)V
	public abstract fun setName (Lnet/kyori/adventure/text/Component;)V
	public abstract fun setPlaceableKeys (Ljava/util/Set;)V
	public abstract fun setUnbreakable (Z)V
}

public abstract interface class dev/racci/minix/api/paper/builders/BookBuilder : dev/racci/minix/api/paper/builders/BaseItemBuilder {
	public abstract fun addPage ([Lnet/kyori/adventure/text/Component;)Ldev/racci/minix/api/paper/builders/BookBuilder;
	public abstract fun getAuthor ()Lnet/kyori/adventure/text/Component;
	public abstract fun getGeneration ()Lorg/bukkit/inventory/meta/BookMeta$Generation;
	public abstract fun getTitle ()Lnet/kyori/adventure/text/Component;
	public abstract fun setAuthor (Lnet/kyori/adventure/text/Component;)V
	public abstract fun setGeneration (Lorg/bukkit/inventory/meta/BookMeta$Generation;)V
	public abstract fun setPages ([Lkotlin/Pair;)Ldev/racci/minix/api/paper/builders/BookBuilder;
	public abstract fun setTitle (Lnet/kyori/adventure/text/Component;)V
}

public abstract interface class dev/racci/minix/api/paper/builders/FireworkBuilder : dev/racci/minix/api/paper/builders/BaseItemBuilder {
	public abstract fun addEffects ([Lorg/bukkit/FireworkEffect;)Ldev/racci/minix/api/paper/builders/FireworkBuilder;
	public abstract fun getEffects ()Ljava/util/List;
	public abstract fun getPower ()I
	public abstract fun setEffects (Ljava/util/List;)V
	public abstract fun setPower (I)V
}

public abstract interface class dev/racci/minix/api/paper/builders/HeadBuilder : dev/racci/minix/api/paper/builders/BaseItemBuilder {
	public abstract fun getOwner ()Lorg/bukkit/OfflinePlayer;
	public abstract fun getPlayerProfiler ()Lcom/destroystokyo/paper/profile/PlayerProfile;
	public abstract fun getTexture ()Ljava/lang/String;
	public abstract fun setOwner (Lorg/bukkit/OfflinePlayer;)V
	public abstract fun setPlayerProfiler (Lcom/destroystokyo/paper/profile/PlayerProfile;)V
	public abstract fun setTexture (Ljava/lang/String;)V
}

public abstract interface class dev/racci/minix/api/paper/builders/ItemBuilder : dev/racci/minix/api/paper/builders/BaseItemBuilder {
}

public abstract interface class dev/racci/minix/api/paper/builders/ItemBuilderDSL {
	public static final field Companion Ldev/racci/minix/api/paper/builders/ItemBuilderDSL$Companion;
	public abstract fun banner (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public abstract fun book (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public abstract fun firework (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public abstract fun from (Lorg/bukkit/Material;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public abstract fun from (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public abstract fun head (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public abstract fun map (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/paper/builders/ItemBuilderDSL$Companion : dev/racci/minix/api/paper/builders/ItemBuilderDSL {
	public fun banner (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public fun book (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public fun firework (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public fun from (Lorg/bukkit/Material;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public fun from (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public fun head (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
	public fun map (Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;)Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/paper/builders/ItemBuilderDSL$DefaultImpls {
	public static synthetic fun banner$default (Ldev/racci/minix/api/paper/builders/ItemBuilderDSL;Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
	public static synthetic fun book$default (Ldev/racci/minix/api/paper/builders/ItemBuilderDSL;Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
	public static synthetic fun firework$default (Ldev/racci/minix/api/paper/builders/ItemBuilderDSL;Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
	public static synthetic fun from$default (Ldev/racci/minix/api/paper/builders/ItemBuilderDSL;Lorg/bukkit/Material;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
	public static synthetic fun from$default (Ldev/racci/minix/api/paper/builders/ItemBuilderDSL;Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
	public static synthetic fun head$default (Ldev/racci/minix/api/paper/builders/ItemBuilderDSL;Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
	public static synthetic fun map$default (Ldev/racci/minix/api/paper/builders/ItemBuilderDSL;Lorg/bukkit/inventory/ItemStack;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/bukkit/inventory/ItemStack;
}

public abstract interface class dev/racci/minix/api/paper/builders/MapBuilder {
	public abstract fun getColour ()Lorg/bukkit/Color;
	public abstract fun getLocName ()Ljava/lang/String;
	public abstract fun getScaling ()Z
	public abstract fun getView ()Lorg/bukkit/map/MapView;
	public abstract fun setColour (Lorg/bukkit/Color;)V
	public abstract fun setLocName (Ljava/lang/String;)V
	public abstract fun setScaling (Z)V
	public abstract fun setView (Lorg/bukkit/map/MapView;)V
}

public final class dev/racci/minix/api/plugin/Metrics {
	public final fun addCustomChart (Lorg/bstats/charts/CustomChart;)V
	public final fun getEnabled ()Z
	public final fun getMetricsID ()I
	public final fun initialize (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class dev/racci/minix/api/plugin/MinixPlugin : org/bukkit/plugin/java/JavaPlugin, dev/racci/minix/api/lifecycles/ComplexManagedLifecycle, dev/racci/minix/api/plugin/PlatformPlugin, dev/racci/minix/api/plugin/WithPlugin, org/koin/core/component/KoinScopeComponent, org/koin/core/qualifier/Qualifier {
	public fun <init> ()V
	public fun async (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun closeScope ()V
	public fun compareTo (Ldev/racci/minix/api/plugin/PlatformPlugin;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun completableAsync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun completableSync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public fun deferredAsync (Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public fun deferredSync (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public final fun getDataFolder ()Ljava/nio/file/Path;
	public final fun getDependencies ()Lkotlinx/collections/immutable/ImmutableSet;
	public final fun getEnabled ()Z
	public fun getKoin ()Lorg/koin/core/Koin;
	public final fun getLogger ()Ldev/racci/minix/api/logger/MinixLogger;
	public final fun getMetrics ()Ldev/racci/minix/api/plugin/Metrics;
	public fun getMinecraftContext ()Lkotlin/coroutines/CoroutineContext;
	public final fun getPlatformClassLoader ()Ljava/lang/ClassLoader;
	public final fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public final fun getScope ()Lorg/koin/core/scope/Scope;
	public final fun getValue ()Ljava/lang/String;
	public final fun getVersion ()Ldev/racci/minix/data/Version;
	public fun handleDisable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleEnable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostDisable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostEnable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleReload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public fun onDisable ()V
	public fun onEnable ()V
	public fun onLoad ()V
	public fun registerEvents ([Lorg/bukkit/event/Listener;)V
	public fun sync (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public abstract interface class dev/racci/minix/api/plugin/PlatformPlugin : java/lang/Comparable, org/koin/core/qualifier/Qualifier {
	public static final field Companion Ldev/racci/minix/api/plugin/PlatformPlugin$Companion;
	public abstract fun compareTo (Ldev/racci/minix/api/plugin/PlatformPlugin;)I
	public abstract fun getDataFolder ()Ljava/nio/file/Path;
	public abstract fun getDependencies ()Lkotlinx/collections/immutable/ImmutableSet;
	public abstract fun getPlatformClassLoader ()Ljava/lang/ClassLoader;
	public abstract fun getValue ()Ljava/lang/String;
	public abstract fun getVersion ()Ldev/racci/minix/data/Version;
}

public final class dev/racci/minix/api/plugin/PlatformPlugin$Companion : dev/racci/minix/api/wrappers/WrapperCompanion {
	public fun wrapped (Ljava/lang/Object;)Ldev/racci/minix/api/plugin/PlatformPlugin;
	public synthetic fun wrapped (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/plugin/PlatformPlugin$DefaultImpls {
	public static fun compareTo (Ldev/racci/minix/api/plugin/PlatformPlugin;Ldev/racci/minix/api/plugin/PlatformPlugin;)I
}

public abstract interface class dev/racci/minix/api/plugin/WithPlugin : org/koin/core/component/KoinComponent, org/koin/core/component/KoinScopeComponent {
	public abstract fun async (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public abstract fun completableAsync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public abstract fun completableSync (Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public abstract fun deferredAsync (Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public abstract fun deferredSync (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getContext ()Lkotlin/coroutines/CoroutineContext;
	public abstract fun getCoroutineScope ()Lkotlinx/coroutines/CoroutineScope;
	public abstract fun getDataFolder ()Ljava/nio/file/Path;
	public abstract fun getLogger ()Ldev/racci/minix/api/logger/MinixLogger;
	public abstract fun getMinecraftContext ()Lkotlin/coroutines/CoroutineContext;
	public abstract fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public abstract fun getScope ()Lorg/koin/core/scope/Scope;
	public abstract fun launch (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public abstract fun registerEvents ([Lorg/bukkit/event/Listener;)V
	public abstract fun sync (Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public final class dev/racci/minix/api/plugin/WithPlugin$DefaultImpls {
	public static fun async (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun closeScope (Ldev/racci/minix/api/plugin/WithPlugin;)V
	public static fun completableAsync (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun completableSync (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun deferredAsync (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public static fun deferredSync (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun getContext (Ldev/racci/minix/api/plugin/WithPlugin;)Lkotlin/coroutines/CoroutineContext;
	public static fun getCoroutineScope (Ldev/racci/minix/api/plugin/WithPlugin;)Lkotlinx/coroutines/CoroutineScope;
	public static fun getDataFolder (Ldev/racci/minix/api/plugin/WithPlugin;)Ljava/nio/file/Path;
	public static fun getKoin (Ldev/racci/minix/api/plugin/WithPlugin;)Lorg/koin/core/Koin;
	public static fun getLogger (Ldev/racci/minix/api/plugin/WithPlugin;)Ldev/racci/minix/api/logger/MinixLogger;
	public static fun getMinecraftContext (Ldev/racci/minix/api/plugin/WithPlugin;)Lkotlin/coroutines/CoroutineContext;
	public static fun getScope (Ldev/racci/minix/api/plugin/WithPlugin;)Lorg/koin/core/scope/Scope;
	public static fun launch (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static synthetic fun launch$default (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/Job;
	public static fun registerEvents (Ldev/racci/minix/api/plugin/WithPlugin;[Lorg/bukkit/event/Listener;)V
	public static fun sync (Ldev/racci/minix/api/plugin/WithPlugin;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
}

public abstract class dev/racci/minix/api/scheduler/CoroutineRunnable {
	public fun <init> ()V
	public final fun cancel ()V
	public final fun getCancelled ()Z
	public final fun getName ()Ljava/lang/String;
	public final fun getPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public final fun getTaskID ()I
	public final fun named (Ljava/lang/String;)Ldev/racci/minix/api/scheduler/CoroutineRunnable;
	public abstract fun run (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun runAsyncTask (Ldev/racci/minix/api/plugin/MinixPlugin;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public final fun runAsyncTaskLater-HG0u8IE (Ldev/racci/minix/api/plugin/MinixPlugin;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public final fun runAsyncTaskTimer-5qebJ5I (Ldev/racci/minix/api/plugin/MinixPlugin;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public final fun runTask (Ldev/racci/minix/api/plugin/MinixPlugin;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public final fun runTaskLater-HG0u8IE (Ldev/racci/minix/api/plugin/MinixPlugin;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public final fun runTaskTimer-5qebJ5I (Ldev/racci/minix/api/plugin/MinixPlugin;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
}

public abstract interface class dev/racci/minix/api/scheduler/CoroutineScheduler {
	public static final field Companion Ldev/racci/minix/api/scheduler/CoroutineScheduler$Companion;
	public abstract fun activateTasks (Ldev/racci/minix/api/plugin/MinixPlugin;)[I
	public abstract fun cancelTask (I)Z
	public abstract fun getParentJob ()Lkotlinx/coroutines/CompletableJob;
	public abstract fun isCurrentlyRunning (I)Z
	public abstract fun runAsyncTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Ldev/racci/minix/api/scheduler/CoroutineRunnable;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTaskLater-Wn2Vu4Y (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTaskTimer-J7AnP2E (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runAsyncTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTaskLater-Wn2Vu4Y (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTaskTimer-J7AnP2E (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun runTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun shutdownTask (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/scheduler/CoroutineScheduler$Companion : dev/racci/minix/api/scheduler/CoroutineScheduler {
	public fun activateTasks (Ldev/racci/minix/api/plugin/MinixPlugin;)[I
	public fun cancelTask (I)Z
	public fun getParentJob ()Lkotlinx/coroutines/CompletableJob;
	public fun isCurrentlyRunning (I)Z
	public fun runAsyncTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Ldev/racci/minix/api/scheduler/CoroutineRunnable;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTaskLater-Wn2Vu4Y (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTaskTimer-J7AnP2E (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runAsyncTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTask (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTaskLater-SxA4cEA (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTaskLater-Wn2Vu4Y (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;J)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTaskTimer-J7AnP2E (Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineRunnable;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun runTaskTimer-VTINZ0E (Ldev/racci/minix/api/plugin/MinixPlugin;Ldev/racci/minix/api/scheduler/CoroutineTask;JJ)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public fun shutdownTask (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/scheduler/CoroutineScheduler$DefaultImpls {
	public static synthetic fun runAsyncTask$default (Ldev/racci/minix/api/scheduler/CoroutineScheduler;Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Ldev/racci/minix/api/scheduler/CoroutineRunnable;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun runAsyncTask$default (Ldev/racci/minix/api/scheduler/CoroutineScheduler;Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun runAsyncTaskLater-Wn2Vu4Y$default (Ldev/racci/minix/api/scheduler/CoroutineScheduler;Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun runAsyncTaskTimer-J7AnP2E$default (Ldev/racci/minix/api/scheduler/CoroutineScheduler;Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JJILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun runTask$default (Ldev/racci/minix/api/scheduler/CoroutineScheduler;Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun runTaskLater-Wn2Vu4Y$default (Ldev/racci/minix/api/scheduler/CoroutineScheduler;Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
	public static synthetic fun runTaskTimer-J7AnP2E$default (Ldev/racci/minix/api/scheduler/CoroutineScheduler;Ldev/racci/minix/api/plugin/MinixPlugin;Ljava/lang/String;Lkotlin/jvm/functions/Function3;JJILjava/lang/Object;)Ldev/racci/minix/api/scheduler/CoroutineTask;
}

public abstract interface class dev/racci/minix/api/scheduler/CoroutineTask {
	public abstract fun async ()Ldev/racci/minix/api/scheduler/CoroutineTask;
	public abstract fun cancel ()Z
	public abstract fun getAsync ()Z
	public abstract fun getJob ()Lkotlinx/coroutines/Job;
	public abstract fun getKeepRunning ()Lkotlinx/atomicfu/AtomicBoolean;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getOwner ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public abstract fun getPeriod-FghU774 ()Lkotlin/time/Duration;
	public abstract fun getRunnable ()Ldev/racci/minix/api/scheduler/CoroutineRunnable;
	public abstract fun getTask ()Lkotlin/jvm/functions/Function3;
	public abstract fun getTaskID ()I
	public abstract fun setName (Ljava/lang/String;)V
	public abstract fun shutdown ()Z
	public abstract fun sync ()Ldev/racci/minix/api/scheduler/CoroutineTask;
}

public abstract class dev/racci/minix/api/services/DataService : dev/racci/minix/api/extension/Extension, dev/racci/minix/api/services/StorageService {
	public static final field Companion Ldev/racci/minix/api/services/DataService$Companion;
	public fun <init> ()V
	public abstract fun getConfig (Lkotlin/reflect/KClass;)Ldev/racci/minix/api/data/MinixConfig;
	public fun getDataSourceProperties ()Ljava/util/Map;
	public fun getDatabase (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getMinixConfig (Ldev/racci/minix/api/plugin/MinixPlugin;)Ldev/racci/minix/api/data/MinixConfig$Minix;
	public fun getStorageDirectory ()Ljava/nio/file/Path;
	public fun handleLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handlePostUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleReload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun withDatabase (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun withDatabaseAsync (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/services/DataService$Companion : dev/racci/minix/api/extension/ExtensionCompanion {
}

public abstract interface class dev/racci/minix/api/services/PlayerService {
	public static final field Companion Ldev/racci/minix/api/services/PlayerService$Companion;
	public abstract fun get (Ljava/lang/Object;)Ldev/racci/minix/api/data/MinixPlayer;
	public abstract fun getInputCallbacks ()Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public abstract fun getMoveCallbacks ()Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public abstract fun getQuitCallbacks ()Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public abstract fun minusAssign (Ljava/lang/Object;)V
	public abstract fun remove (Ljava/util/UUID;)Z
}

public final class dev/racci/minix/api/services/PlayerService$Companion : dev/racci/minix/api/services/PlayerService {
	public fun get (Ljava/lang/Object;)Ldev/racci/minix/api/data/MinixPlayer;
	public fun getInputCallbacks ()Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public fun getMoveCallbacks ()Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public fun getQuitCallbacks ()Ldev/racci/minix/api/collections/player/OnlinePlayerMap;
	public fun minusAssign (Ljava/lang/Object;)V
	public fun remove (Ljava/util/UUID;)Z
}

public abstract interface class dev/racci/minix/api/services/PluginService {
	public static final field Companion Ldev/racci/minix/api/services/PluginService$Companion;
	public abstract fun disablePlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public abstract fun enablePlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public abstract fun firstNonMinixPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public abstract fun fromClass (Lkotlin/reflect/KClass;)Larrow/core/Option;
	public abstract fun fromClassloader (Ljava/lang/ClassLoader;)Larrow/core/Option;
	public abstract fun getLoadedPlugins ()Ljava/util/Map;
	public abstract fun loadPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public abstract fun reloadPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public abstract fun unloadPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public final class dev/racci/minix/api/services/PluginService$Companion : dev/racci/minix/api/services/PluginService {
	public fun disablePlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun enablePlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun firstNonMinixPlugin ()Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun fromClass (Lkotlin/reflect/KClass;)Larrow/core/Option;
	public fun fromClassloader (Ljava/lang/ClassLoader;)Larrow/core/Option;
	public fun getLoadedPlugins ()Ljava/util/Map;
	public final fun getValue (Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ldev/racci/minix/api/plugin/MinixPlugin;
	public fun loadPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun reloadPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
	public fun unloadPlugin (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public final class dev/racci/minix/api/services/PluginService$DefaultImpls {
	public static fun fromClass (Ldev/racci/minix/api/services/PluginService;Lkotlin/reflect/KClass;)Larrow/core/Option;
}

public abstract interface class dev/racci/minix/api/services/StorageService : dev/racci/minix/api/extension/ExtensionSkeleton {
	public static final field PROPERTY_DATABASE Ljava/lang/String;
	public static final field PROPERTY_DATA_SOURCE Ljava/lang/String;
	public abstract fun getDataSourceProperties ()Ljava/util/Map;
	public abstract fun getDatabase (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getManagedTable ()Lorg/jetbrains/exposed/sql/Table;
	public abstract fun getStorageDirectory ()Ljava/nio/file/Path;
	public abstract fun handleLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun handlePostUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun handleReload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun withDatabase (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun withDatabaseAsync (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/services/StorageService$DefaultImpls {
	public static fun async (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun closeScope (Ldev/racci/minix/api/services/StorageService;)V
	public static fun completableAsync (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun completableSync (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function1;)Ljava/util/concurrent/CompletableFuture;
	public static fun deferredAsync (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/Deferred;
	public static fun deferredSync (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun getContext (Ldev/racci/minix/api/services/StorageService;)Lkotlin/coroutines/CoroutineContext;
	public static fun getCoroutineScope (Ldev/racci/minix/api/services/StorageService;)Lkotlinx/coroutines/CoroutineScope;
	public static fun getDataFolder (Ldev/racci/minix/api/services/StorageService;)Ljava/nio/file/Path;
	public static fun getDataSourceProperties (Ldev/racci/minix/api/services/StorageService;)Ljava/util/Map;
	public static fun getDatabase (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun getKoin (Ldev/racci/minix/api/services/StorageService;)Lorg/koin/core/Koin;
	public static fun getLogger (Ldev/racci/minix/api/services/StorageService;)Ldev/racci/minix/api/logger/MinixLogger;
	public static fun getMinecraftContext (Ldev/racci/minix/api/services/StorageService;)Lkotlin/coroutines/CoroutineContext;
	public static fun getScope (Ldev/racci/minix/api/services/StorageService;)Lorg/koin/core/scope/Scope;
	public static fun getStorageDirectory (Ldev/racci/minix/api/services/StorageService;)Ljava/nio/file/Path;
	public static fun handleDisable (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleEnable (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleLoad (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostDisable (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostEnable (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostLoad (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handlePostUnload (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleReload (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun handleUnload (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun launch (Ldev/racci/minix/api/services/StorageService;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun registerEvents (Ldev/racci/minix/api/services/StorageService;[Lorg/bukkit/event/Listener;)V
	public static fun sync (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;
	public static fun withDatabase (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun withDatabaseAsync (Ldev/racci/minix/api/services/StorageService;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/utils/KoinUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/KoinUtils;
	public final fun clearBinds (Ljava/lang/Object;)V
	public final fun createBindArray (Ljava/lang/Object;)[Lkotlin/reflect/KClass;
	public final fun getBinds (Ljava/lang/Object;)[Lkotlin/reflect/KClass;
	public final fun getReference ()Ljava/util/concurrent/ConcurrentHashMap;
}

public final class dev/racci/minix/api/utils/KoinUtils$sam$i$java_util_function_BiFunction$0 : java/util/function/BiFunction {
	public fun <init> (Lkotlin/jvm/functions/Function2;)V
	public final synthetic fun apply (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/utils/minecraft/BlockUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/BlockUtils;
	public final fun getOpposite (Lorg/bukkit/block/BlockFace;)Lorg/bukkit/block/BlockFace;
	public final fun getPlacedAgainstFace (Lorg/bukkit/block/Block;Lorg/bukkit/block/Block;)Lorg/bukkit/block/BlockFace;
	public final fun getSupportingBlock (Lorg/bukkit/block/Block;)Lorg/bukkit/block/Block;
	public final fun getVein (Lorg/bukkit/block/Block;Ljava/util/List;I)Ljava/util/ArrayList;
	public final fun isLiquid (Lorg/bukkit/block/Block;)I
}

public final class dev/racci/minix/api/utils/minecraft/InventoryUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/InventoryUtils;
	public final fun convertRowColumnToSlot (II)I
	public final fun convertRowColumnToSlot (Lkotlin/Pair;)I
	public final fun convertSlotToRowColumn (I)Lkotlin/Pair;
}

public final class dev/racci/minix/api/utils/minecraft/ItemNBT {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/ItemNBT;
	public final fun getString (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Ljava/lang/String;
	public final fun removeTag (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;
	public final fun setBoolean (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;Z)Lorg/bukkit/inventory/ItemStack;
	public final fun setString (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/utils/minecraft/MaterialTagsExtension {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/MaterialTagsExtension;
	public final fun getCARBS ()Lcom/destroystokyo/paper/MaterialSetTag;
	public final fun getCOOKED_MEATS ()Lcom/destroystokyo/paper/MaterialSetTag;
	public final fun getFRUITS ()Lcom/destroystokyo/paper/MaterialSetTag;
	public final fun getRAW_MEATS ()Lcom/destroystokyo/paper/MaterialSetTag;
	public final fun getVEGETABLES ()Lcom/destroystokyo/paper/MaterialSetTag;
}

public final class dev/racci/minix/api/utils/minecraft/NMSUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/NMSUtils;
	public final fun getNMSClass (Ljava/lang/String;)Lkotlin/reflect/KClass;
	public final fun getNMS_PREFIX ()Ljava/lang/String;
}

public abstract interface class dev/racci/minix/api/utils/minecraft/NbtWrapper {
	public abstract fun getString (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Ljava/lang/String;
	public abstract fun removeTag (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;
	public abstract fun setBoolean (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;Z)Lorg/bukkit/inventory/ItemStack;
	public abstract fun setString (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/utils/minecraft/Pdc : dev/racci/minix/api/utils/minecraft/NbtWrapper {
	public static final field Companion Ldev/racci/minix/api/utils/minecraft/Pdc$Companion;
	public fun <init> ()V
	public fun getString (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Ljava/lang/String;
	public fun removeTag (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;
	public fun setBoolean (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;Z)Lorg/bukkit/inventory/ItemStack;
	public fun setString (Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/utils/minecraft/Pdc$Companion {
}

public final class dev/racci/minix/api/utils/minecraft/PlayerUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/PlayerUtils;
	public final fun chatInput (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;Ldev/racci/minix/api/callbacks/ChatInputCallback;)V
	public final fun chatInput (Ldev/racci/minix/api/data/MinixPlayer;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun chatInput$default (Ldev/racci/minix/api/utils/minecraft/PlayerUtils;Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;Ldev/racci/minix/api/callbacks/ChatInputCallback;ILjava/lang/Object;)V
	public final fun whenMove (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerMoveCallback;)V
	public final fun whenQuit (Ldev/racci/minix/api/data/MinixPlayer;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;)V
}

public final class dev/racci/minix/api/utils/minecraft/PlayerUtils$ChatInput {
	public fun <init> (Ldev/racci/minix/api/callbacks/ChatInputCallback;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;)V
	public final fun component1 ()Ldev/racci/minix/api/callbacks/ChatInputCallback;
	public final fun component2 ()Ldev/racci/minix/api/callbacks/PlayerQuitCallback;
	public final fun copy (Ldev/racci/minix/api/callbacks/ChatInputCallback;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;)Ldev/racci/minix/api/utils/minecraft/PlayerUtils$ChatInput;
	public static synthetic fun copy$default (Ldev/racci/minix/api/utils/minecraft/PlayerUtils$ChatInput;Ldev/racci/minix/api/callbacks/ChatInputCallback;Ldev/racci/minix/api/callbacks/PlayerQuitCallback;ILjava/lang/Object;)Ldev/racci/minix/api/utils/minecraft/PlayerUtils$ChatInput;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCallback ()Ldev/racci/minix/api/callbacks/ChatInputCallback;
	public final fun getPlayerQuit ()Ldev/racci/minix/api/callbacks/PlayerQuitCallback;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class dev/racci/minix/api/utils/minecraft/PluginUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/PluginUtils;
	public final fun depend (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/reflect/KClass;Ljava/lang/String;)Ldev/racci/minix/api/utils/minecraft/PluginUtils$DependencyDelegate;
	public final fun softDepend (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/reflect/KClass;Ljava/lang/String;)Ldev/racci/minix/api/utils/minecraft/PluginUtils$SoftDependencyDelegate;
}

public final class dev/racci/minix/api/utils/minecraft/PluginUtils$DependencyDelegate : kotlin/properties/ReadOnlyProperty {
	public fun <init> (Ljava/lang/String;Lkotlin/reflect/KClass;)V
	public final fun getPluginName ()Ljava/lang/String;
	public final fun getType ()Lkotlin/reflect/KClass;
	public fun getValue (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/reflect/KProperty;)Lorg/bukkit/plugin/Plugin;
	public synthetic fun getValue (Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/utils/minecraft/PluginUtils$SoftDependencyDelegate : kotlin/properties/ReadOnlyProperty {
	public fun <init> (Ljava/lang/String;Lkotlin/reflect/KClass;)V
	public final fun getPluginName ()Ljava/lang/String;
	public final fun getType ()Lkotlin/reflect/KClass;
	public fun getValue (Ldev/racci/minix/api/plugin/MinixPlugin;Lkotlin/reflect/KProperty;)Lorg/bukkit/plugin/Plugin;
	public synthetic fun getValue (Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/utils/minecraft/ProjectileUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/ProjectileUtils;
	public final fun getBow (Lorg/bukkit/entity/Arrow;)Lorg/bukkit/inventory/ItemStack;
}

public final class dev/racci/minix/api/utils/minecraft/TakeMaxTimePerTickUtilsKt {
	public static final fun takeMaxPerTick-8Mi8wO0 (Ldev/racci/minix/api/plugin/MinixPlugin;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun takeMaxPerTick-8Mi8wO0 (Ldev/racci/minix/api/plugin/WithPlugin;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/racci/minix/api/utils/minecraft/TameUtils {
	public static final field INSTANCE Ldev/racci/minix/api/utils/minecraft/TameUtils;
	public final fun hasOwner (Lorg/bukkit/entity/Entity;)Z
	public final fun isOwner (Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
	public final fun isTamed (Lorg/bukkit/entity/Entity;)Z
}

public final class dev/racci/minix/api/utils/minecraft/destructuring/EventDestructuringKt {
	public static final fun component1 (Lorg/bukkit/event/block/BlockEvent;)Lorg/bukkit/block/Block;
	public static final fun component1 (Lorg/bukkit/event/entity/EntityEvent;)Lorg/bukkit/entity/Entity;
	public static final fun component1 (Lorg/bukkit/event/entity/PlayerLeashEntityEvent;)Lorg/bukkit/entity/Player;
	public static final fun component1 (Lorg/bukkit/event/inventory/InventoryEvent;)Lorg/bukkit/inventory/Inventory;
	public static final fun component1 (Lorg/bukkit/event/inventory/InventoryMoveItemEvent;)Lorg/bukkit/inventory/ItemStack;
	public static final fun component1 (Lorg/bukkit/event/inventory/InventoryPickupItemEvent;)Lorg/bukkit/entity/Item;
	public static final fun component1 (Lorg/bukkit/event/player/PlayerEvent;)Lorg/bukkit/entity/Player;
	public static final fun component1 (Lorg/bukkit/event/server/TabCompleteEvent;)Lorg/bukkit/command/CommandSender;
	public static final fun component1 (Lorg/bukkit/event/vehicle/VehicleEvent;)Lorg/bukkit/entity/Vehicle;
	public static final fun component1 (Lorg/bukkit/event/weather/WeatherEvent;)Lorg/bukkit/World;
	public static final fun component1 (Lorg/bukkit/event/world/WorldEvent;)Lorg/bukkit/World;
	public static final fun component2 (Lorg/bukkit/event/entity/PlayerLeashEntityEvent;)Lorg/bukkit/entity/Entity;
	public static final fun component2 (Lorg/bukkit/event/inventory/InventoryEvent;)Ljava/util/List;
	public static final fun component2 (Lorg/bukkit/event/inventory/InventoryMoveItemEvent;)Lorg/bukkit/inventory/Inventory;
	public static final fun component2 (Lorg/bukkit/event/inventory/InventoryPickupItemEvent;)Lorg/bukkit/inventory/Inventory;
	public static final fun component2 (Lorg/bukkit/event/player/PlayerExpChangeEvent;)I
	public static final fun component2 (Lorg/bukkit/event/player/PlayerItemHeldEvent;)I
	public static final fun component2 (Lorg/bukkit/event/player/PlayerMoveEvent;)Lorg/bukkit/Location;
	public static final fun component2 (Lorg/bukkit/event/server/TabCompleteEvent;)Ljava/util/List;
	public static final fun component2 (Lorg/bukkit/event/vehicle/VehicleMoveEvent;)Lorg/bukkit/Location;
	public static final fun component3 (Lorg/bukkit/event/entity/PlayerLeashEntityEvent;)Lorg/bukkit/entity/Entity;
	public static final fun component3 (Lorg/bukkit/event/inventory/InventoryEvent;)Lorg/bukkit/inventory/InventoryView;
	public static final fun component3 (Lorg/bukkit/event/inventory/InventoryMoveItemEvent;)Lorg/bukkit/inventory/Inventory;
	public static final fun component3 (Lorg/bukkit/event/player/PlayerItemHeldEvent;)I
	public static final fun component3 (Lorg/bukkit/event/player/PlayerMoveEvent;)Lorg/bukkit/Location;
	public static final fun component3 (Lorg/bukkit/event/server/TabCompleteEvent;)Ljava/lang/String;
	public static final fun component3 (Lorg/bukkit/event/vehicle/VehicleMoveEvent;)Lorg/bukkit/Location;
}

public final class dev/racci/minix/api/utils/minecraft/destructuring/LocationDestructuringKt {
	public static final fun component1 (Lorg/bukkit/Location;)D
	public static final fun component1 (Lorg/bukkit/util/Vector;)D
	public static final fun component2 (Lorg/bukkit/Location;)D
	public static final fun component2 (Lorg/bukkit/util/Vector;)D
	public static final fun component3 (Lorg/bukkit/Location;)D
	public static final fun component3 (Lorg/bukkit/util/Vector;)D
	public static final fun component4 (Lorg/bukkit/Location;)Lorg/bukkit/World;
}

public final class dev/racci/minix/api/utils/minecraft/destructuring/PatternDestructuringKt {
	public static final fun component1 (Lorg/bukkit/block/banner/Pattern;)Lorg/bukkit/DyeColor;
	public static final fun component2 (Lorg/bukkit/block/banner/Pattern;)Lorg/bukkit/block/banner/PatternType;
}

public abstract interface class dev/racci/minix/api/wrappers/WrapperCompanion {
	public abstract fun wrapped (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class dev/racci/minix/flowbus/PaperEventReceiver : dev/racci/minix/flowbus/receiver/EventReceiverImpl {
	public fun <init> (Ldev/racci/minix/flowbus/PaperFlowBus;)V
	public fun isCancelled (Ljava/lang/Object;)Z
}

public final class dev/racci/minix/flowbus/PaperFlowBus : dev/racci/minix/flowbus/FlowBus {
	public fun <init> ()V
	public fun forEvent (Lkotlin/reflect/KClass;)Ldev/racci/minix/flowbus/RendezvousStateFlow;
}

public final class dev/racci/minix/flowbus/PaperStateFlow : dev/racci/minix/flowbus/RendezvousStateFlow {
	public fun <init> (Ljava/lang/Object;)V
}

public abstract class dev/racci/minix/integrations/misc/ServerUtilsIntegration : dev/racci/minix/flowbus/receiver/EventReceiver, dev/racci/minix/integrations/Integration {
	public fun <init> ()V
	public fun createEventScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun flowOf-tHAJEeM (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZ)Lkotlinx/coroutines/flow/Flow;
	public fun getExceptionHandler (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineExceptionHandler;
	public fun getSupervisorScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun handleEnable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun isCancelled (Ljava/lang/Object;)Z
	public fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;Ldev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-ZYpfZMU (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;)V
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;)V
}

public final class dev/racci/minix/integrations/placeholderapi/MinixPlaceholderIntegration : dev/racci/minix/api/integrations/placeholders/PlaceholderIntegration {
	public fun <init> (Ldev/racci/minix/api/plugin/MinixPlugin;)V
}

public final class dev/racci/minix/integrations/regions/AreaRegion : dev/racci/minix/api/integrations/regions/Region {
	public static final synthetic fun box-impl (Lme/angeschossen/lands/api/land/LandArea;)Ldev/racci/minix/integrations/regions/AreaRegion;
	public fun canAttack (Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
	public static fun canAttack-impl (Lme/angeschossen/lands/api/land/LandArea;Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
	public fun canBreak (Lorg/bukkit/entity/Player;)Z
	public static fun canBreak-impl (Lme/angeschossen/lands/api/land/LandArea;Lorg/bukkit/entity/Player;)Z
	public fun canBuild (Lorg/bukkit/entity/Player;)Z
	public static fun canBuild-impl (Lme/angeschossen/lands/api/land/LandArea;Lorg/bukkit/entity/Player;)Z
	public fun canInteract (Lorg/bukkit/entity/Player;)Z
	public static fun canInteract-impl (Lme/angeschossen/lands/api/land/LandArea;Lorg/bukkit/entity/Player;)Z
	public static fun constructor-impl (Lme/angeschossen/lands/api/land/LandArea;)Lme/angeschossen/lands/api/land/LandArea;
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (Lme/angeschossen/lands/api/land/LandArea;Ljava/lang/Object;)Z
	public static final fun equals-impl0 (Lme/angeschossen/lands/api/land/LandArea;Lme/angeschossen/lands/api/land/LandArea;)Z
	public final fun getArea ()Lme/angeschossen/lands/api/land/LandArea;
	public fun getId ()I
	public static fun getId-impl (Lme/angeschossen/lands/api/land/LandArea;)I
	public fun getName ()Ljava/lang/String;
	public static fun getName-impl (Lme/angeschossen/lands/api/land/LandArea;)Ljava/lang/String;
	public fun getOwner ()Ljava/util/UUID;
	public static fun getOwner-impl (Lme/angeschossen/lands/api/land/LandArea;)Ljava/util/UUID;
	public fun getWorld ()Lorg/bukkit/World;
	public static fun getWorld-impl (Lme/angeschossen/lands/api/land/LandArea;)Lorg/bukkit/World;
	public fun hashCode ()I
	public static fun hashCode-impl (Lme/angeschossen/lands/api/land/LandArea;)I
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (Lme/angeschossen/lands/api/land/LandArea;)Ljava/lang/String;
	public final synthetic fun unbox-impl ()Lme/angeschossen/lands/api/land/LandArea;
}

public final class dev/racci/minix/integrations/regions/LandsRegionIntegration : dev/racci/minix/api/integrations/regions/RegionIntegration {
	public fun <init> (Ldev/racci/minix/core/plugin/Minix;)V
	public fun canAttack (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;Lorg/bukkit/entity/Entity;)Z
	public fun canBreak (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public fun canBuild (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public fun canInteract (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Z
	public fun getRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Larrow/core/Option;
	public fun handleEnable (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleLoad (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleUnload (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun ifTrustedInRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/entity/Player;Lkotlin/jvm/functions/Function0;)Z
	public fun ifWilderness (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;Lkotlin/jvm/functions/Function0;)Z
	public fun ifWildernessOrTrusted (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/entity/Player;Lkotlin/jvm/functions/Function0;)Z
	public fun insideRegion (Ldev/racci/minix/data/structs/minecraft/BlockPos;Lorg/bukkit/World;)Z
}

public final class dev/racci/minix/ticker/PaperTicker : dev/racci/minix/ticker/Ticker, dev/racci/minix/flowbus/receiver/EventReceiver {
	public field subscriberDispatcher Lkotlinx/coroutines/ExecutorCoroutineDispatcher;
	public field tickerDispatcher Lkotlinx/coroutines/ExecutorCoroutineDispatcher;
	public fun <init> ()V
	public fun createEventScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun flowOf-tHAJEeM (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZ)Lkotlinx/coroutines/flow/Flow;
	public fun getExceptionHandler (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineExceptionHandler;
	public fun getSupervisorScope (Ldev/racci/minix/flowbus/receiver/EventReceiver;)Lkotlinx/coroutines/CoroutineScope;
	public fun isCancelled (Ljava/lang/Object;)Z
	public fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun setSubscriberDispatcher (Lkotlinx/coroutines/ExecutorCoroutineDispatcher;)V
	public fun setTickerDispatcher (Lkotlinx/coroutines/ExecutorCoroutineDispatcher;)V
	public fun subscribeTo (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;Ldev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-ZYpfZMU (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;IZZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;)V
	public fun unsubscribe (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;)V
}

public final class org/koin/ksp/generated/DefaultKt {
	public static final fun defaultModule (Lorg/koin/core/KoinApplication;)Lorg/koin/core/KoinApplication;
	public static final fun getDefaultModule ()Lorg/koin/core/module/Module;
}

