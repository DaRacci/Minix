public abstract interface class dev/racci/minix/flowbus/EmitterCancellable {
	public abstract fun cancel ()V
	public abstract fun getCancelled ()Z
	public abstract fun setCancelled (Z)V
}

public abstract interface class dev/racci/minix/flowbus/EventCallback {
	public static final field Companion Ldev/racci/minix/flowbus/EventCallback$Companion;
	public abstract fun getPriority-VkJqNSg ()I
	public abstract fun onEvent (Ljava/lang/Object;)V
}

public final class dev/racci/minix/flowbus/EventCallback$Companion {
	public final fun of-ydLcrOQ (I)Ldev/racci/minix/flowbus/MutableEventCallbackBuilder;
}

public final class dev/racci/minix/flowbus/EventCallback$DefaultImpls {
	public static fun getPriority-VkJqNSg (Ldev/racci/minix/flowbus/EventCallback;)I
}

public class dev/racci/minix/flowbus/FlowBus {
	public fun <init> ()V
	public final fun access$postOn (Ldev/racci/minix/flowbus/RendezvousStateFlow;Ljava/lang/Object;Z)V
	public final fun dropAll ()V
	public final fun dropEvent (Lkotlin/reflect/KClass;)V
	public fun forEvent (Lkotlin/reflect/KClass;)Ldev/racci/minix/flowbus/RendezvousStateFlow;
	public final fun getFlow (Lkotlin/reflect/KClass;)Lkotlinx/coroutines/flow/Flow;
	protected fun getFlows ()Ljava/util/Map;
	public final fun getLastEvent (Lkotlin/reflect/KClass;)Ljava/lang/Object;
	public final fun post (Ljava/lang/Object;Z)V
	public static synthetic fun post$default (Ldev/racci/minix/flowbus/FlowBus;Ljava/lang/Object;ZILjava/lang/Object;)V
	public final fun postDeferred (Ljava/lang/Object;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun postDeferred$default (Ldev/racci/minix/flowbus/FlowBus;Ljava/lang/Object;ZLkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	protected fun postOn (Ldev/racci/minix/flowbus/RendezvousStateFlow;Ljava/lang/Object;Z)V
	protected fun postOnDeferred (Ldev/racci/minix/flowbus/RendezvousStateFlow;Ljava/lang/Object;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class dev/racci/minix/flowbus/IDispatcherProvider {
	public abstract fun getDispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
}

public final class dev/racci/minix/flowbus/MutableEventCallbackBuilder {
	public final fun getPriority-VkJqNSg ()I
	public final fun priority-ydLcrOQ (I)Ldev/racci/minix/flowbus/MutableEventCallbackBuilder;
	public final fun setPriority-ydLcrOQ (I)V
}

public final class dev/racci/minix/flowbus/Priority {
	public static final field Companion Ldev/racci/minix/flowbus/Priority$Companion;
	public static final synthetic fun box-impl (I)Ldev/racci/minix/flowbus/Priority;
	public static fun constructor-impl (I)I
	public fun equals (Ljava/lang/Object;)Z
	public static fun equals-impl (ILjava/lang/Object;)Z
	public static final fun equals-impl0 (II)Z
	public final fun getValue ()I
	public fun hashCode ()I
	public static fun hashCode-impl (I)I
	public fun toString ()Ljava/lang/String;
	public static fun toString-impl (I)Ljava/lang/String;
	public final synthetic fun unbox-impl ()I
}

public final class dev/racci/minix/flowbus/Priority$Companion {
	public final fun getDEFAULT-VkJqNSg ()I
	public final fun getFINAL-VkJqNSg ()I
	public final fun getINITIAL-VkJqNSg ()I
	public final fun getMONITOR-VkJqNSg ()I
	public final fun of-Mudkl4U (I)I
	public final fun of-Mudkl4U (Ljava/lang/String;)I
}

public final class dev/racci/minix/flowbus/RendezvousStateFlow : kotlinx/coroutines/flow/MutableStateFlow {
	public fun collect (Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun collectHolding (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun compareAndSet (Ljava/lang/Object;Ljava/lang/Object;)Z
	public fun emit (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun emitAsync (Ljava/lang/Object;)Lkotlinx/coroutines/Deferred;
	public fun getReplayCache ()Ljava/util/List;
	public fun getSubscriptionCount ()Lkotlinx/coroutines/flow/StateFlow;
	public fun getValue ()Ljava/lang/Object;
	public fun resetReplayCache ()V
	public fun setValue (Ljava/lang/Object;)V
	public fun tryEmit (Ljava/lang/Object;)Z
}

public abstract interface class dev/racci/minix/flowbus/receiver/EventReceiver {
	public abstract fun isCancelled (Ljava/lang/Object;)Z
	public abstract fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public abstract fun subscribeTo-JX9rdgg (Lkotlin/reflect/KClass;ZIZLdev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public abstract fun subscribeTo-JX9rdgg (Lkotlin/reflect/KClass;ZIZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public abstract fun unsubscribe ()V
	public abstract fun unsubscribe (Lkotlin/reflect/KClass;)V
}

public final class dev/racci/minix/flowbus/receiver/EventReceiver$DefaultImpls {
	public static synthetic fun subscribeTo-JX9rdgg$default (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;ZIZLdev/racci/minix/flowbus/EventCallback;ILjava/lang/Object;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public static synthetic fun subscribeTo-JX9rdgg$default (Ldev/racci/minix/flowbus/receiver/EventReceiver;Lkotlin/reflect/KClass;ZIZLkotlin/jvm/functions/Function2;ILjava/lang/Object;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
}

public class dev/racci/minix/flowbus/receiver/EventReceiverImpl : dev/racci/minix/flowbus/receiver/EventReceiver {
	public fun <init> (Ldev/racci/minix/flowbus/FlowBus;)V
	public fun isCancelled (Ljava/lang/Object;)Z
	public fun returnOn (Lkotlinx/coroutines/CoroutineDispatcher;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-JX9rdgg (Lkotlin/reflect/KClass;ZIZLdev/racci/minix/flowbus/EventCallback;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun subscribeTo-JX9rdgg (Lkotlin/reflect/KClass;ZIZLkotlin/jvm/functions/Function2;)Ldev/racci/minix/flowbus/receiver/EventReceiver;
	public fun unsubscribe ()V
	public fun unsubscribe (Lkotlin/reflect/KClass;)V
}

public final class org/koin/ksp/generated/DefaultKt {
	public static final fun defaultModule (Lorg/koin/core/KoinApplication;)Lorg/koin/core/KoinApplication;
	public static final fun getDefaultModule ()Lorg/koin/core/module/Module;
}

